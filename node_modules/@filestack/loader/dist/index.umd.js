!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports.FilestackLoader=t():e.FilestackLoader=t()}(window,(function(){return function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}return n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=0)}([function(e,t,n){"use strict";n.r(t),n.d(t,"loadModules",(function(){return u})),n.d(t,"loadModule",(function(){return a})),n.d(t,"registerModule",(function(){return s})),n.d(t,"loadCss",(function(){return c})),n.d(t,"FILESTACK_MODULES",(function(){return l}));const r={},o=(()=>{let e;e="undefined"==typeof window?r:window;let t=e.filestackInternals;return t||(t={modules:{}},e.filestackInternals=t),t.modules||(t.modules={}),t})(),i=o&&o.modules,d=(e,t,n)=>{e.detachEvent?e.detachEvent("onreadystatechange",t):e.removeEventListener(n,t,!1)},u=e=>Promise.all(e.map(({id:e,url:t})=>a(e,t))).then(t=>{const n={};return t.forEach((t,r)=>{const o=e[r];n[o.id]=t}),n}),a=(e,t)=>{if("undefined"==typeof window)return Promise.reject(new Error("Load module is working only on browser env"));if(!e)throw new Error("Module id is required");let n=i[e];return e="fs-loader-"+e,n||(i[e]={},n=i[e]),n.instance?Promise.resolve(n.instance):n.promise?n.promise:n.promise=new Promise((n,r)=>{const o=t=>{if("load"===t.type||/^(complete|loaded)$/.test((t.currentTarget||t.srcElement).readyState)){const u=t.currentTarget||t.srcElement;d(u,o,"load"),d(u,r,"error"),setTimeout(()=>n(i[e]?i[e].instance:void 0),10)}},u=document.createElement("script");u.id=e,!u.attachEvent||u.attachEvent.toString&&u.attachEvent.toString().indexOf("[native code")<0?(u.addEventListener("load",o,!1),u.addEventListener("onerror",r,!1)):u.attachEvent("onreadystatechange",o),u.setAttribute("crossorigin","anonymous"),u.setAttribute("charset","utf-8"),u.setAttribute("async","true"),u.src=t,document.body.appendChild(u)})},s=(e,t,n)=>{if("undefined"!=typeof window){if(!e)throw new Error("Module id is required");if(!i)throw new Error("Loader is not initialized");i[e="fs-loader-"+e]&&(i[e]={instance:t,metadata:n})}},c=e=>null!==document.querySelector(`link[href="${e}"]`)?Promise.resolve():new Promise(t=>{const n=document.getElementsByTagName("head")[0],r=document.createElement("link"),o=()=>{t(),r.removeEventListener("load",o)};r.rel="stylesheet",r.href=e,r.addEventListener("load",o),n.appendChild(r)});var l;!function(e){e.FILESTACK_SDK="filestack-sdk",e.TRANSFORMS_UI="transforms-ui",e.PICKER="picker"}(l||(l={}))}])}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,