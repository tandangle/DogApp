/*
 * Copyright (c) 2019 by Filestack.
 * Some rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Calculates a MD5 checksum for passed buffer
 * @private
 * @param data  Data to be hashed
 * @returns     base64 encoded MD5 hash
 */
export var md5 = function (data) {
    return require('crypto')
        .createHash('md5')
        .update(data)
        .digest('base64');
};
/**
 * return based string
 * @param data
 */
export var b64 = function (data, safeUrl) {
    if (safeUrl === void 0) { safeUrl = false; }
    var b64 = Buffer.from(data).toString('base64');
    if (safeUrl) {
        return b64.replace(/\//g, '_').replace(/\+/g, '-');
    }
    return b64;
};
/**
 * Return currently used filestack-js sdk version
 */
export var getVersion = function () {
    var rootArr = __dirname.split('/');
    var fsIndex = rootArr.findIndex(function (e) { return e === 'filestack-js'; });
    var rootDir = rootArr.splice(0, fsIndex + 1).join('/');
    return "JS-" + require(rootDir + "/package.json").version;
};
/**
 * Returns if browser is a mobile device (if node env always return false)
 */
/* istanbul ignore next */
export var isMobile = function () { return false; };
/**
 * Check if application is runned in facebook browser
 */
export var isFacebook = function () { return false; };

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9saWIvdXRpbHMvaW5kZXgubm9kZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7O0dBZUc7QUFFSDs7Ozs7R0FLRztBQUNILE1BQU0sQ0FBQyxJQUFNLEdBQUcsR0FBRyxVQUFDLElBQVM7SUFDM0IsT0FBTyxPQUFPLENBQUMsUUFBUSxDQUFDO1NBQ25CLFVBQVUsQ0FBQyxLQUFLLENBQUM7U0FDakIsTUFBTSxDQUFDLElBQUksQ0FBQztTQUNaLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUN4QixDQUFDLENBQUM7QUFFRjs7O0dBR0c7QUFDSCxNQUFNLENBQUMsSUFBTSxHQUFHLEdBQUcsVUFBQyxJQUFZLEVBQUUsT0FBd0I7SUFBeEIsd0JBQUEsRUFBQSxlQUF3QjtJQUN4RCxJQUFNLEdBQUcsR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUVqRCxJQUFJLE9BQU8sRUFBRTtRQUNYLE9BQU8sR0FBRyxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsR0FBRyxDQUFDLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxHQUFHLENBQUMsQ0FBQztLQUNwRDtJQUVELE9BQU8sR0FBRyxDQUFDO0FBQ2IsQ0FBQyxDQUFDO0FBRUY7O0dBRUc7QUFDSCxNQUFNLENBQUMsSUFBTSxVQUFVLEdBQUc7SUFDeEIsSUFBTSxPQUFPLEdBQUcsU0FBUyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUNyQyxJQUFNLE9BQU8sR0FBRyxPQUFPLENBQUMsU0FBUyxDQUFDLFVBQUMsQ0FBQyxJQUFLLE9BQUEsQ0FBQyxLQUFLLGNBQWMsRUFBcEIsQ0FBb0IsQ0FBQyxDQUFDO0lBQy9ELElBQU0sT0FBTyxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLE9BQU8sR0FBRyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7SUFFekQsT0FBTyxRQUFNLE9BQU8sQ0FBSSxPQUFPLGtCQUFlLENBQUMsQ0FBQyxPQUFTLENBQUM7QUFDNUQsQ0FBQyxDQUFDO0FBRUY7O0dBRUc7QUFDSCwwQkFBMEI7QUFDMUIsTUFBTSxDQUFDLElBQU0sUUFBUSxHQUFHLGNBQU0sT0FBQSxLQUFLLEVBQUwsQ0FBSyxDQUFDO0FBRXBDOztHQUVHO0FBQ0gsTUFBTSxDQUFDLElBQU0sVUFBVSxHQUFHLGNBQU0sT0FBQSxLQUFLLEVBQUwsQ0FBSyxDQUFDIiwiZmlsZSI6ImxpYi91dGlscy9pbmRleC5ub2RlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIENvcHlyaWdodCAoYykgMjAxOSBieSBGaWxlc3RhY2suXG4gKiBTb21lIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuLyoqXG4gKiBDYWxjdWxhdGVzIGEgTUQ1IGNoZWNrc3VtIGZvciBwYXNzZWQgYnVmZmVyXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIGRhdGEgIERhdGEgdG8gYmUgaGFzaGVkXG4gKiBAcmV0dXJucyAgICAgYmFzZTY0IGVuY29kZWQgTUQ1IGhhc2hcbiAqL1xuZXhwb3J0IGNvbnN0IG1kNSA9IChkYXRhOiBhbnkpOiBzdHJpbmcgPT4ge1xuICByZXR1cm4gcmVxdWlyZSgnY3J5cHRvJylcbiAgICAgIC5jcmVhdGVIYXNoKCdtZDUnKVxuICAgICAgLnVwZGF0ZShkYXRhKVxuICAgICAgLmRpZ2VzdCgnYmFzZTY0Jyk7XG59O1xuXG4vKipcbiAqIHJldHVybiBiYXNlZCBzdHJpbmdcbiAqIEBwYXJhbSBkYXRhXG4gKi9cbmV4cG9ydCBjb25zdCBiNjQgPSAoZGF0YTogc3RyaW5nLCBzYWZlVXJsOiBib29sZWFuID0gZmFsc2UpOiBzdHJpbmcgPT4ge1xuICBjb25zdCBiNjQgPSBCdWZmZXIuZnJvbShkYXRhKS50b1N0cmluZygnYmFzZTY0Jyk7XG5cbiAgaWYgKHNhZmVVcmwpIHtcbiAgICByZXR1cm4gYjY0LnJlcGxhY2UoL1xcLy9nLCAnXycpLnJlcGxhY2UoL1xcKy9nLCAnLScpO1xuICB9XG5cbiAgcmV0dXJuIGI2NDtcbn07XG5cbi8qKlxuICogUmV0dXJuIGN1cnJlbnRseSB1c2VkIGZpbGVzdGFjay1qcyBzZGsgdmVyc2lvblxuICovXG5leHBvcnQgY29uc3QgZ2V0VmVyc2lvbiA9ICgpID0+IHtcbiAgY29uc3Qgcm9vdEFyciA9IF9fZGlybmFtZS5zcGxpdCgnLycpO1xuICBjb25zdCBmc0luZGV4ID0gcm9vdEFyci5maW5kSW5kZXgoKGUpID0+IGUgPT09ICdmaWxlc3RhY2stanMnKTtcbiAgY29uc3Qgcm9vdERpciA9IHJvb3RBcnIuc3BsaWNlKDAsIGZzSW5kZXggKyAxKS5qb2luKCcvJyk7XG5cbiAgcmV0dXJuIGBKUy0ke3JlcXVpcmUoYCR7cm9vdERpcn0vcGFja2FnZS5qc29uYCkudmVyc2lvbn1gO1xufTtcblxuLyoqXG4gKiBSZXR1cm5zIGlmIGJyb3dzZXIgaXMgYSBtb2JpbGUgZGV2aWNlIChpZiBub2RlIGVudiBhbHdheXMgcmV0dXJuIGZhbHNlKVxuICovXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuZXhwb3J0IGNvbnN0IGlzTW9iaWxlID0gKCkgPT4gZmFsc2U7XG5cbi8qKlxuICogQ2hlY2sgaWYgYXBwbGljYXRpb24gaXMgcnVubmVkIGluIGZhY2Vib29rIGJyb3dzZXJcbiAqL1xuZXhwb3J0IGNvbnN0IGlzRmFjZWJvb2sgPSAoKSA9PiBmYWxzZTtcbiJdfQ==
