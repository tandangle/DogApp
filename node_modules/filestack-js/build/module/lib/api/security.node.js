/*
 * Copyright (c) 2018 by Filestack.
 * Some rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { FilestackError, FilestackErrorType } from './../../filestack_error';
import { getValidator, SecurityParamsSchema } from './../../schema';
import * as crypto from 'crypto';
/**
 * Returns Filestack base64 policy and HMAC-SHA256 signature
 *
 * ### Example
 *
 * ```js
 * import * as filestack from 'filestack-js';
 *
 * const jsonPolicy = { 'expiry': 253381964415 };
 * const security = filestack.getSecurity(jsonPolicy, '<YOUR_APP_SECRET>');
 * ```
 *
 * @param policyOptions
 * @param appSecret
 */
export var getSecurity = function (policyOptions, appSecret) {
    var validateRes = getValidator(SecurityParamsSchema)(policyOptions);
    if (validateRes.errors.length) {
        throw new FilestackError("Invalid security params", validateRes.errors, FilestackErrorType.VALIDATION);
    }
    var policy = Buffer.from(JSON.stringify(policyOptions)).toString('base64');
    var signature = crypto.createHmac('sha256', appSecret)
        .update(policy)
        .digest('hex');
    return { policy: policy, signature: signature };
};
/**
 * Check webhook signature
 *
 * @param secret - app secred
 * @param rawBody - unchanged raw webhook body
 * @param toCompare - data from wh response headers
 */
export var validateWebhookSignature = function (secret, rawBody, toCompare) {
    var hash = crypto.createHmac('sha256', secret)
        .update(toCompare.timestamp + "." + rawBody)
        .digest('hex');
    return hash === toCompare.signature;
};

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9saWIvYXBpL3NlY3VyaXR5Lm5vZGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Ozs7OztHQWVHO0FBSUgsT0FBTyxFQUFFLGNBQWMsRUFBRSxrQkFBa0IsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBQzdFLE9BQU8sRUFBRSxZQUFZLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUNwRSxPQUFPLEtBQUssTUFBTSxNQUFNLFFBQVEsQ0FBQztBQUVqQzs7Ozs7Ozs7Ozs7Ozs7R0FjRztBQUNILE1BQU0sQ0FBQyxJQUFNLFdBQVcsR0FBRyxVQUFDLGFBQThCLEVBQUUsU0FBaUI7SUFDM0UsSUFBTSxXQUFXLEdBQUcsWUFBWSxDQUFDLG9CQUFvQixDQUFDLENBQUMsYUFBYSxDQUFDLENBQUM7SUFFdEUsSUFBSSxXQUFXLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRTtRQUM3QixNQUFNLElBQUksY0FBYyxDQUFDLHlCQUF5QixFQUFFLFdBQVcsQ0FBQyxNQUFNLEVBQUUsa0JBQWtCLENBQUMsVUFBVSxDQUFDLENBQUM7S0FDeEc7SUFFRCxJQUFNLE1BQU0sR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDN0UsSUFBTSxTQUFTLEdBQUcsTUFBTSxDQUFDLFVBQVUsQ0FBQyxRQUFRLEVBQUUsU0FBUyxDQUFDO1NBQ3RDLE1BQU0sQ0FBQyxNQUFNLENBQUM7U0FDZCxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7SUFFaEMsT0FBTyxFQUFFLE1BQU0sUUFBQSxFQUFFLFNBQVMsV0FBQSxFQUFFLENBQUM7QUFDL0IsQ0FBQyxDQUFDO0FBRUY7Ozs7OztHQU1HO0FBQ0gsTUFBTSxDQUFDLElBQU0sd0JBQXdCLEdBQUcsVUFBQyxNQUFjLEVBQUUsT0FBZSxFQUFFLFNBQWlDO0lBQ3pHLElBQU0sSUFBSSxHQUFHLE1BQU0sQ0FBQyxVQUFVLENBQUMsUUFBUSxFQUFFLE1BQU0sQ0FBQztTQUNqQyxNQUFNLENBQUksU0FBUyxDQUFDLFNBQVMsU0FBSSxPQUFTLENBQUM7U0FDM0MsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBRTdCLE9BQU8sSUFBSSxLQUFLLFNBQVMsQ0FBQyxTQUFTLENBQUM7QUFDdEMsQ0FBQyxDQUFDIiwiZmlsZSI6ImxpYi9hcGkvc2VjdXJpdHkubm9kZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTggYnkgRmlsZXN0YWNrLlxuICogU29tZSByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IFNlY3VyaXR5IH0gZnJvbSAnLi4vY2xpZW50JztcbmltcG9ydCB7IFdlYmhvb2tWYWxpZGF0ZVBheWxvYWQsIFNlY3VyaXR5T3B0aW9ucyB9IGZyb20gJy4vc2VjdXJpdHknO1xuaW1wb3J0IHsgRmlsZXN0YWNrRXJyb3IsIEZpbGVzdGFja0Vycm9yVHlwZSB9IGZyb20gJy4vLi4vLi4vZmlsZXN0YWNrX2Vycm9yJztcbmltcG9ydCB7IGdldFZhbGlkYXRvciwgU2VjdXJpdHlQYXJhbXNTY2hlbWEgfSBmcm9tICcuLy4uLy4uL3NjaGVtYSc7XG5pbXBvcnQgKiBhcyBjcnlwdG8gZnJvbSAnY3J5cHRvJztcblxuLyoqXG4gKiBSZXR1cm5zIEZpbGVzdGFjayBiYXNlNjQgcG9saWN5IGFuZCBITUFDLVNIQTI1NiBzaWduYXR1cmVcbiAqXG4gKiAjIyMgRXhhbXBsZVxuICpcbiAqIGBgYGpzXG4gKiBpbXBvcnQgKiBhcyBmaWxlc3RhY2sgZnJvbSAnZmlsZXN0YWNrLWpzJztcbiAqXG4gKiBjb25zdCBqc29uUG9saWN5ID0geyAnZXhwaXJ5JzogMjUzMzgxOTY0NDE1IH07XG4gKiBjb25zdCBzZWN1cml0eSA9IGZpbGVzdGFjay5nZXRTZWN1cml0eShqc29uUG9saWN5LCAnPFlPVVJfQVBQX1NFQ1JFVD4nKTtcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSBwb2xpY3lPcHRpb25zXG4gKiBAcGFyYW0gYXBwU2VjcmV0XG4gKi9cbmV4cG9ydCBjb25zdCBnZXRTZWN1cml0eSA9IChwb2xpY3lPcHRpb25zOiBTZWN1cml0eU9wdGlvbnMsIGFwcFNlY3JldDogc3RyaW5nKTogU2VjdXJpdHkgPT4ge1xuICBjb25zdCB2YWxpZGF0ZVJlcyA9IGdldFZhbGlkYXRvcihTZWN1cml0eVBhcmFtc1NjaGVtYSkocG9saWN5T3B0aW9ucyk7XG5cbiAgaWYgKHZhbGlkYXRlUmVzLmVycm9ycy5sZW5ndGgpIHtcbiAgICB0aHJvdyBuZXcgRmlsZXN0YWNrRXJyb3IoYEludmFsaWQgc2VjdXJpdHkgcGFyYW1zYCwgdmFsaWRhdGVSZXMuZXJyb3JzLCBGaWxlc3RhY2tFcnJvclR5cGUuVkFMSURBVElPTik7XG4gIH1cblxuICBjb25zdCBwb2xpY3kgPSBCdWZmZXIuZnJvbShKU09OLnN0cmluZ2lmeShwb2xpY3lPcHRpb25zKSkudG9TdHJpbmcoJ2Jhc2U2NCcpO1xuICBjb25zdCBzaWduYXR1cmUgPSBjcnlwdG8uY3JlYXRlSG1hYygnc2hhMjU2JywgYXBwU2VjcmV0KVxuICAgICAgICAgICAgICAgICAgIC51cGRhdGUocG9saWN5KVxuICAgICAgICAgICAgICAgICAgIC5kaWdlc3QoJ2hleCcpO1xuXG4gIHJldHVybiB7IHBvbGljeSwgc2lnbmF0dXJlIH07XG59O1xuXG4vKipcbiAqIENoZWNrIHdlYmhvb2sgc2lnbmF0dXJlXG4gKlxuICogQHBhcmFtIHNlY3JldCAtIGFwcCBzZWNyZWRcbiAqIEBwYXJhbSByYXdCb2R5IC0gdW5jaGFuZ2VkIHJhdyB3ZWJob29rIGJvZHlcbiAqIEBwYXJhbSB0b0NvbXBhcmUgLSBkYXRhIGZyb20gd2ggcmVzcG9uc2UgaGVhZGVyc1xuICovXG5leHBvcnQgY29uc3QgdmFsaWRhdGVXZWJob29rU2lnbmF0dXJlID0gKHNlY3JldDogc3RyaW5nLCByYXdCb2R5OiBzdHJpbmcsIHRvQ29tcGFyZTogV2ViaG9va1ZhbGlkYXRlUGF5bG9hZCkgPT4ge1xuICBjb25zdCBoYXNoID0gY3J5cHRvLmNyZWF0ZUhtYWMoJ3NoYTI1NicsIHNlY3JldClcbiAgICAgICAgICAgICAgICAudXBkYXRlKGAke3RvQ29tcGFyZS50aW1lc3RhbXB9LiR7cmF3Qm9keX1gKVxuICAgICAgICAgICAgICAgIC5kaWdlc3QoJ2hleCcpO1xuXG4gIHJldHVybiBoYXNoID09PSB0b0NvbXBhcmUuc2lnbmF0dXJlO1xufTtcbiJdfQ==
