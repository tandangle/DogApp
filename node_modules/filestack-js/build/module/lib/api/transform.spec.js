import { __assign } from "tslib";
/*
 * Copyright (c) 2018 by Filestack.
 * Some rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { transform } from './transform';
import { config } from './../../config';
import { Filelink } from './../filelink';
jest.mock('./../filelink');
var defaultApikey = 'EXAMPLE_API_KEY';
var defaultHandle = 'EXAMPLE_HANDLE';
var defaultSecurity = {
    policy: 'examplePolicy',
    signature: 'exampleSignature',
};
var sessionURls = config.urls;
var defaultSession = {
    apikey: defaultApikey,
    urls: sessionURls,
};
describe('OldTransforms', function () {
    it('should pass params to Filelink class', function () {
        transform(defaultSession, defaultHandle, {
            partial_pixelate: {
                amount: 2,
            },
        });
        expect(Filelink.prototype.addTask).toHaveBeenCalledWith('partial_pixelate', {
            amount: 2,
        });
    });
    it('should respect security params', function () {
        transform(__assign(__assign({}, defaultSession), defaultSecurity), defaultHandle, {
            partial_pixelate: {
                amount: 2,
            },
        });
        expect(Filelink.prototype.addTask).toHaveBeenCalledWith('security', defaultSecurity);
    });
    it('should respect cache=false transformation', function () {
        transform(defaultSession, defaultHandle, {
            // @ts-ignore
            cache: false,
        });
        expect(Filelink.prototype.addTask).toHaveBeenCalledWith('cache', false);
    });
    it('should remove falsy parameters transformation', function () {
        transform(defaultSession, defaultHandle, {
            flip: false,
        });
        expect(Filelink.prototype.addTask).not.toHaveBeenCalledWith('flip', false);
    });
    it('should change cammel case to snake case transformations', function () {
        transform(defaultSession, defaultHandle, {
            // @ts-ignore
            partialPixelate: {
                amount: 2,
            },
        });
        expect(Filelink.prototype.addTask).toHaveBeenCalledWith('partial_pixelate', {
            amount: 2,
        });
    });
    it('return call toString on filelink when params are empty', function () {
        var testUrl = 'nanana';
        spyOn(Filelink.prototype, 'toString').and.callFake(function () { return testUrl; });
        expect(transform(defaultSession, defaultHandle)).toEqual(testUrl);
    });
    it('should enable base64 on filelink', function () {
        transform(defaultSession, defaultHandle, {
            // @ts-ignore
            partialPixelate: {
                amount: 2,
            },
        }, true);
        expect(Filelink.prototype.setBase64).toHaveBeenCalledWith(true);
    });
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9saWIvYXBpL3RyYW5zZm9ybS5zcGVjLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7Ozs7Ozs7Ozs7Ozs7O0dBZUc7QUFDSCxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sYUFBYSxDQUFDO0FBQ3hDLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUN4QyxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRXpDLElBQUksQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLENBQUM7QUFFM0IsSUFBTSxhQUFhLEdBQUcsaUJBQWlCLENBQUM7QUFDeEMsSUFBTSxhQUFhLEdBQUcsZ0JBQWdCLENBQUM7QUFDdkMsSUFBTSxlQUFlLEdBQUc7SUFDdEIsTUFBTSxFQUFFLGVBQWU7SUFDdkIsU0FBUyxFQUFFLGtCQUFrQjtDQUM5QixDQUFDO0FBRUYsSUFBTSxXQUFXLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQztBQUNoQyxJQUFNLGNBQWMsR0FBRztJQUNyQixNQUFNLEVBQUUsYUFBYTtJQUNyQixJQUFJLEVBQUUsV0FBVztDQUNsQixDQUFDO0FBRUYsUUFBUSxDQUFDLGVBQWUsRUFBRTtJQUN4QixFQUFFLENBQUMsc0NBQXNDLEVBQUU7UUFDekMsU0FBUyxDQUNQLGNBQWMsRUFDZCxhQUFhLEVBQ2I7WUFDRSxnQkFBZ0IsRUFBRTtnQkFDaEIsTUFBTSxFQUFFLENBQUM7YUFDVjtTQUNGLENBQ0YsQ0FBQztRQUVGLE1BQU0sQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxDQUFDLG9CQUFvQixDQUFDLGtCQUFrQixFQUFFO1lBQzFFLE1BQU0sRUFBRSxDQUFDO1NBQ1YsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDLENBQUM7SUFFSCxFQUFFLENBQUMsZ0NBQWdDLEVBQUU7UUFDbkMsU0FBUyx1QkFFRixjQUFjLEdBQ2QsZUFBZSxHQUVwQixhQUFhLEVBQ2I7WUFDRSxnQkFBZ0IsRUFBRTtnQkFDaEIsTUFBTSxFQUFFLENBQUM7YUFDVjtTQUNGLENBQ0YsQ0FBQztRQUVGLE1BQU0sQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxDQUFDLG9CQUFvQixDQUFDLFVBQVUsRUFBRSxlQUFlLENBQUMsQ0FBQztJQUN2RixDQUFDLENBQUMsQ0FBQztJQUVILEVBQUUsQ0FBQywyQ0FBMkMsRUFBRTtRQUM5QyxTQUFTLENBQ1AsY0FBYyxFQUNkLGFBQWEsRUFDYjtZQUNFLGFBQWE7WUFDYixLQUFLLEVBQUUsS0FBSztTQUNiLENBQ0YsQ0FBQztRQUVGLE1BQU0sQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxDQUFDLG9CQUFvQixDQUFDLE9BQU8sRUFBRSxLQUFLLENBQUMsQ0FBQztJQUMxRSxDQUFDLENBQUMsQ0FBQztJQUVILEVBQUUsQ0FBQywrQ0FBK0MsRUFBRTtRQUNsRCxTQUFTLENBQ1AsY0FBYyxFQUNkLGFBQWEsRUFDYjtZQUNFLElBQUksRUFBRSxLQUFLO1NBQ1osQ0FDRixDQUFDO1FBRUYsTUFBTSxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLENBQUMsR0FBRyxDQUFDLG9CQUFvQixDQUFDLE1BQU0sRUFBRSxLQUFLLENBQUMsQ0FBQztJQUM3RSxDQUFDLENBQUMsQ0FBQztJQUVILEVBQUUsQ0FBQyx5REFBeUQsRUFBRTtRQUM1RCxTQUFTLENBQ1AsY0FBYyxFQUNkLGFBQWEsRUFDYjtZQUNFLGFBQWE7WUFDYixlQUFlLEVBQUU7Z0JBQ2YsTUFBTSxFQUFFLENBQUM7YUFDVjtTQUNGLENBQ0YsQ0FBQztRQUVGLE1BQU0sQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxDQUFDLG9CQUFvQixDQUFDLGtCQUFrQixFQUFFO1lBQzFFLE1BQU0sRUFBRSxDQUFDO1NBQ1YsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDLENBQUM7SUFFSCxFQUFFLENBQUMsd0RBQXdELEVBQUU7UUFDM0QsSUFBTSxPQUFPLEdBQUcsUUFBUSxDQUFDO1FBQ3pCLEtBQUssQ0FBQyxRQUFRLENBQUMsU0FBUyxFQUFFLFVBQVUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsY0FBTSxPQUFBLE9BQU8sRUFBUCxDQUFPLENBQUMsQ0FBQztRQUVsRSxNQUFNLENBQUMsU0FBUyxDQUNkLGNBQWMsRUFDZCxhQUFhLENBQ2QsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUN0QixDQUFDLENBQUMsQ0FBQztJQUVILEVBQUUsQ0FBQyxrQ0FBa0MsRUFBRTtRQUNyQyxTQUFTLENBQ1AsY0FBYyxFQUNkLGFBQWEsRUFDYjtZQUNFLGFBQWE7WUFDYixlQUFlLEVBQUU7Z0JBQ2YsTUFBTSxFQUFFLENBQUM7YUFDVjtTQUNGLEVBQ0QsSUFBSSxDQUNMLENBQUM7UUFFRixNQUFNLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxvQkFBb0IsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNsRSxDQUFDLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQyxDQUFDIiwiZmlsZSI6ImxpYi9hcGkvdHJhbnNmb3JtLnNwZWMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogQ29weXJpZ2h0IChjKSAyMDE4IGJ5IEZpbGVzdGFjay5cbiAqIFNvbWUgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuaW1wb3J0IHsgdHJhbnNmb3JtIH0gZnJvbSAnLi90cmFuc2Zvcm0nO1xuaW1wb3J0IHsgY29uZmlnIH0gZnJvbSAnLi8uLi8uLi9jb25maWcnO1xuaW1wb3J0IHsgRmlsZWxpbmsgfSBmcm9tICcuLy4uL2ZpbGVsaW5rJztcblxuamVzdC5tb2NrKCcuLy4uL2ZpbGVsaW5rJyk7XG5cbmNvbnN0IGRlZmF1bHRBcGlrZXkgPSAnRVhBTVBMRV9BUElfS0VZJztcbmNvbnN0IGRlZmF1bHRIYW5kbGUgPSAnRVhBTVBMRV9IQU5ETEUnO1xuY29uc3QgZGVmYXVsdFNlY3VyaXR5ID0ge1xuICBwb2xpY3k6ICdleGFtcGxlUG9saWN5JyxcbiAgc2lnbmF0dXJlOiAnZXhhbXBsZVNpZ25hdHVyZScsXG59O1xuXG5jb25zdCBzZXNzaW9uVVJscyA9IGNvbmZpZy51cmxzO1xuY29uc3QgZGVmYXVsdFNlc3Npb24gPSB7XG4gIGFwaWtleTogZGVmYXVsdEFwaWtleSxcbiAgdXJsczogc2Vzc2lvblVSbHMsXG59O1xuXG5kZXNjcmliZSgnT2xkVHJhbnNmb3JtcycsICgpID0+IHtcbiAgaXQoJ3Nob3VsZCBwYXNzIHBhcmFtcyB0byBGaWxlbGluayBjbGFzcycsICgpID0+IHtcbiAgICB0cmFuc2Zvcm0oXG4gICAgICBkZWZhdWx0U2Vzc2lvbixcbiAgICAgIGRlZmF1bHRIYW5kbGUsXG4gICAgICB7XG4gICAgICAgIHBhcnRpYWxfcGl4ZWxhdGU6IHtcbiAgICAgICAgICBhbW91bnQ6IDIsXG4gICAgICAgIH0sXG4gICAgICB9XG4gICAgKTtcblxuICAgIGV4cGVjdChGaWxlbGluay5wcm90b3R5cGUuYWRkVGFzaykudG9IYXZlQmVlbkNhbGxlZFdpdGgoJ3BhcnRpYWxfcGl4ZWxhdGUnLCB7XG4gICAgICBhbW91bnQ6IDIsXG4gICAgfSk7XG4gIH0pO1xuXG4gIGl0KCdzaG91bGQgcmVzcGVjdCBzZWN1cml0eSBwYXJhbXMnLCAoKSA9PiB7XG4gICAgdHJhbnNmb3JtKFxuICAgICAge1xuICAgICAgICAuLi5kZWZhdWx0U2Vzc2lvbixcbiAgICAgICAgLi4uZGVmYXVsdFNlY3VyaXR5LFxuICAgICAgfSxcbiAgICAgIGRlZmF1bHRIYW5kbGUsXG4gICAgICB7XG4gICAgICAgIHBhcnRpYWxfcGl4ZWxhdGU6IHtcbiAgICAgICAgICBhbW91bnQ6IDIsXG4gICAgICAgIH0sXG4gICAgICB9XG4gICAgKTtcblxuICAgIGV4cGVjdChGaWxlbGluay5wcm90b3R5cGUuYWRkVGFzaykudG9IYXZlQmVlbkNhbGxlZFdpdGgoJ3NlY3VyaXR5JywgZGVmYXVsdFNlY3VyaXR5KTtcbiAgfSk7XG5cbiAgaXQoJ3Nob3VsZCByZXNwZWN0IGNhY2hlPWZhbHNlIHRyYW5zZm9ybWF0aW9uJywgKCkgPT4ge1xuICAgIHRyYW5zZm9ybShcbiAgICAgIGRlZmF1bHRTZXNzaW9uLFxuICAgICAgZGVmYXVsdEhhbmRsZSxcbiAgICAgIHtcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICBjYWNoZTogZmFsc2UsXG4gICAgICB9XG4gICAgKTtcblxuICAgIGV4cGVjdChGaWxlbGluay5wcm90b3R5cGUuYWRkVGFzaykudG9IYXZlQmVlbkNhbGxlZFdpdGgoJ2NhY2hlJywgZmFsc2UpO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIHJlbW92ZSBmYWxzeSBwYXJhbWV0ZXJzIHRyYW5zZm9ybWF0aW9uJywgKCkgPT4ge1xuICAgIHRyYW5zZm9ybShcbiAgICAgIGRlZmF1bHRTZXNzaW9uLFxuICAgICAgZGVmYXVsdEhhbmRsZSxcbiAgICAgIHtcbiAgICAgICAgZmxpcDogZmFsc2UsXG4gICAgICB9XG4gICAgKTtcblxuICAgIGV4cGVjdChGaWxlbGluay5wcm90b3R5cGUuYWRkVGFzaykubm90LnRvSGF2ZUJlZW5DYWxsZWRXaXRoKCdmbGlwJywgZmFsc2UpO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIGNoYW5nZSBjYW1tZWwgY2FzZSB0byBzbmFrZSBjYXNlIHRyYW5zZm9ybWF0aW9ucycsICgpID0+IHtcbiAgICB0cmFuc2Zvcm0oXG4gICAgICBkZWZhdWx0U2Vzc2lvbixcbiAgICAgIGRlZmF1bHRIYW5kbGUsXG4gICAgICB7XG4gICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgcGFydGlhbFBpeGVsYXRlOiB7XG4gICAgICAgICAgYW1vdW50OiAyLFxuICAgICAgICB9LFxuICAgICAgfVxuICAgICk7XG5cbiAgICBleHBlY3QoRmlsZWxpbmsucHJvdG90eXBlLmFkZFRhc2spLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKCdwYXJ0aWFsX3BpeGVsYXRlJywge1xuICAgICAgYW1vdW50OiAyLFxuICAgIH0pO1xuICB9KTtcblxuICBpdCgncmV0dXJuIGNhbGwgdG9TdHJpbmcgb24gZmlsZWxpbmsgd2hlbiBwYXJhbXMgYXJlIGVtcHR5JywgKCkgPT4ge1xuICAgIGNvbnN0IHRlc3RVcmwgPSAnbmFuYW5hJztcbiAgICBzcHlPbihGaWxlbGluay5wcm90b3R5cGUsICd0b1N0cmluZycpLmFuZC5jYWxsRmFrZSgoKSA9PiB0ZXN0VXJsKTtcblxuICAgIGV4cGVjdCh0cmFuc2Zvcm0oXG4gICAgICBkZWZhdWx0U2Vzc2lvbixcbiAgICAgIGRlZmF1bHRIYW5kbGVcbiAgICApKS50b0VxdWFsKHRlc3RVcmwpO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIGVuYWJsZSBiYXNlNjQgb24gZmlsZWxpbmsnLCAoKSA9PiB7XG4gICAgdHJhbnNmb3JtKFxuICAgICAgZGVmYXVsdFNlc3Npb24sXG4gICAgICBkZWZhdWx0SGFuZGxlLFxuICAgICAge1xuICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgIHBhcnRpYWxQaXhlbGF0ZToge1xuICAgICAgICAgIGFtb3VudDogMixcbiAgICAgICAgfSxcbiAgICAgIH0sXG4gICAgICB0cnVlXG4gICAgKTtcblxuICAgIGV4cGVjdChGaWxlbGluay5wcm90b3R5cGUuc2V0QmFzZTY0KS50b0hhdmVCZWVuQ2FsbGVkV2l0aCh0cnVlKTtcbiAgfSk7XG59KTtcbiJdfQ==
