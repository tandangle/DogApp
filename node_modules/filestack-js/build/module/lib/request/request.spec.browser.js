/*
 * Copyright (c) 2019 by Filestack.
 * Some rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { __awaiter, __generator } from "tslib";
import { FsRequest } from './request';
import { FsHttpMethod } from './types';
import { Dispatch } from './dispatch';
jest.mock('./dispatch');
var dispatchSpy = jest.fn(function () { return Promise.resolve('response'); });
// @ts-ignore
Dispatch.prototype.request.mockImplementation(dispatchSpy);
describe('Request/Request', function () {
    describe('dispatch', function () {
        it('should return response', function () { return __awaiter(void 0, void 0, void 0, function () {
            var fsRequest, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        fsRequest = new FsRequest();
                        return [4 /*yield*/, fsRequest.dispatch({ method: FsHttpMethod.GET })];
                    case 1:
                        response = _a.sent();
                        expect(dispatchSpy).toHaveBeenCalledWith({ method: FsHttpMethod.GET });
                        expect(response).toBe('response');
                        return [2 /*return*/];
                }
            });
        }); });
    });
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9saWIvcmVxdWVzdC9yZXF1ZXN0LnNwZWMuYnJvd3Nlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7O0dBZUc7O0FBRUgsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUN0QyxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sU0FBUyxDQUFDO0FBQ3ZDLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxZQUFZLENBQUM7QUFFdEMsSUFBSSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQztBQUV4QixJQUFNLFdBQVcsR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDLGNBQU0sT0FBQSxPQUFPLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxFQUEzQixDQUEyQixDQUFDLENBQUM7QUFDL0QsYUFBYTtBQUNiLFFBQVEsQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLGtCQUFrQixDQUFDLFdBQVcsQ0FBQyxDQUFDO0FBRTNELFFBQVEsQ0FBQyxpQkFBaUIsRUFBRTtJQUUxQixRQUFRLENBQUMsVUFBVSxFQUFFO1FBQ25CLEVBQUUsQ0FBQyx3QkFBd0IsRUFBRTs7Ozs7d0JBQ3JCLFNBQVMsR0FBRyxJQUFJLFNBQVMsRUFBRSxDQUFDO3dCQUNqQixxQkFBTSxTQUFTLENBQUMsUUFBUSxDQUFDLEVBQUUsTUFBTSxFQUFFLFlBQVksQ0FBQyxHQUFHLEVBQUUsQ0FBQyxFQUFBOzt3QkFBakUsUUFBUSxHQUFHLFNBQXNEO3dCQUV2RSxNQUFNLENBQUMsV0FBVyxDQUFDLENBQUMsb0JBQW9CLENBQUMsRUFBRSxNQUFNLEVBQUUsWUFBWSxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUM7d0JBRXZFLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7Ozs7YUFDbkMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMsQ0FBQyIsImZpbGUiOiJsaWIvcmVxdWVzdC9yZXF1ZXN0LnNwZWMuYnJvd3Nlci5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTkgYnkgRmlsZXN0YWNrLlxuICogU29tZSByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IEZzUmVxdWVzdCB9IGZyb20gJy4vcmVxdWVzdCc7XG5pbXBvcnQgeyBGc0h0dHBNZXRob2QgfSBmcm9tICcuL3R5cGVzJztcbmltcG9ydCB7IERpc3BhdGNoIH0gZnJvbSAnLi9kaXNwYXRjaCc7XG5cbmplc3QubW9jaygnLi9kaXNwYXRjaCcpO1xuXG5jb25zdCBkaXNwYXRjaFNweSA9IGplc3QuZm4oKCkgPT4gUHJvbWlzZS5yZXNvbHZlKCdyZXNwb25zZScpKTtcbi8vIEB0cy1pZ25vcmVcbkRpc3BhdGNoLnByb3RvdHlwZS5yZXF1ZXN0Lm1vY2tJbXBsZW1lbnRhdGlvbihkaXNwYXRjaFNweSk7XG5cbmRlc2NyaWJlKCdSZXF1ZXN0L1JlcXVlc3QnLCAoKSA9PiB7XG5cbiAgZGVzY3JpYmUoJ2Rpc3BhdGNoJywgKCkgPT4ge1xuICAgIGl0KCdzaG91bGQgcmV0dXJuIHJlc3BvbnNlJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgZnNSZXF1ZXN0ID0gbmV3IEZzUmVxdWVzdCgpO1xuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmc1JlcXVlc3QuZGlzcGF0Y2goeyBtZXRob2Q6IEZzSHR0cE1ldGhvZC5HRVQgfSk7XG5cbiAgICAgIGV4cGVjdChkaXNwYXRjaFNweSkudG9IYXZlQmVlbkNhbGxlZFdpdGgoeyBtZXRob2Q6IEZzSHR0cE1ldGhvZC5HRVQgfSk7XG5cbiAgICAgIGV4cGVjdChyZXNwb25zZSkudG9CZSgncmVzcG9uc2UnKTtcbiAgICB9KTtcbiAgfSk7XG59KTtcbiJdfQ==
