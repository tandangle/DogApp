/*
 * Copyright (c) 2018 by Filestack.
 * Some rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { __awaiter, __generator } from "tslib";
import * as nock from 'nock';
import { Dispatch } from './dispatch';
import { HttpAdapter } from './adapters/http';
import { FsHttpMethod } from './types';
import { FsRequestError, FsRequestErrorCode } from './error';
jest.mock('./adapters/http');
describe('Request/Dispatch', function () {
    afterEach(function () {
        nock.cleanAll();
    });
    var adapter = new HttpAdapter();
    var url = 'https://filestack.com';
    var configBase = {
        url: url,
        method: FsHttpMethod.GET,
    };
    var fsResponseBase = {
        status: 400,
        statusText: 'error',
        headers: null,
        data: null,
        config: configBase,
    };
    describe('dispatch request', function () {
        it('should return req', function () { return __awaiter(void 0, void 0, void 0, function () {
            var dispatch, req;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        spyOn(adapter, 'request').and.callFake(function () { return Promise.resolve(); });
                        dispatch = new Dispatch(adapter);
                        req = { url: url, method: FsHttpMethod.GET, headers: {} };
                        return [4 /*yield*/, dispatch.request(req)];
                    case 1:
                        _a.sent();
                        expect(adapter.request).toHaveBeenCalledWith(req);
                        return [2 /*return*/];
                }
            });
        }); });
    });
    describe('dispatch request catch', function () {
        it('should return config base', function () { return __awaiter(void 0, void 0, void 0, function () {
            var error, dispatch, request;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        error = new FsRequestError('error msg', configBase, fsResponseBase);
                        spyOn(adapter, 'request').and.callFake(function () { return Promise.reject(error); });
                        dispatch = new Dispatch(adapter);
                        return [4 /*yield*/, dispatch.request(configBase).catch(function (err) { return err; })];
                    case 1:
                        request = _a.sent();
                        expect(adapter.request).toHaveBeenCalledWith(configBase);
                        return [2 /*return*/];
                }
            });
        }); });
        it('should return config base', function () { return __awaiter(void 0, void 0, void 0, function () {
            var error, dispatch;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        fsResponseBase.status = 500;
                        error = new FsRequestError('error msg', configBase, fsResponseBase, FsRequestErrorCode.NETWORK);
                        spyOn(adapter, 'request').and.callFake(function () { return Promise.reject(error); });
                        dispatch = new Dispatch(adapter);
                        return [4 /*yield*/, dispatch.request(configBase).catch(function (err) { return err; })];
                    case 1:
                        _a.sent();
                        expect(adapter.request).toHaveBeenCalledWith(configBase);
                        return [2 /*return*/];
                }
            });
        }); });
        it('should return config', function () { return __awaiter(void 0, void 0, void 0, function () {
            var config, error, dispatch;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        config = {
                            url: url,
                            method: FsHttpMethod.GET,
                            headers: {},
                            retry: {
                                retry: 3,
                            },
                        };
                        fsResponseBase.status = 500;
                        error = new FsRequestError('error msg', config, fsResponseBase, FsRequestErrorCode.NETWORK);
                        spyOn(adapter, 'request').and.callFake(function () { return Promise.reject(error); });
                        dispatch = new Dispatch(adapter);
                        return [4 /*yield*/, dispatch.request(config).catch(function (err) { return err; })];
                    case 1:
                        _a.sent();
                        expect(adapter.request).toHaveBeenCalledWith(config);
                        return [2 /*return*/];
                }
            });
        }); });
    });
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,
