/*
 * Copyright (c) 2019 by Filestack.
 * Some rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { FsCancelToken } from './token';
describe('Request/Token', function () {
    describe('cancel', function () {
        var token = new FsCancelToken();
        it('cancel token should return undefined without value', function () { return expect(token.cancel()).toEqual(undefined); });
    });
    describe('cancel', function () {
        var token = new FsCancelToken();
        // @ts-ignore
        it("cancel token should return undefined with value new String('Aborted')", function () { return expect(token.cancel(new String('Aborted'))).toEqual(undefined); });
    });
    describe('source token', function () {
        it('source token should return called', function (done) {
            var token = new FsCancelToken();
            var source = token.getSource();
            var cancelSpy = jest.fn().mockName('cancelSpy');
            var cancelSpyCatch = jest.fn().mockName('cancelSpyCatch');
            source.then(cancelSpy).catch(cancelSpyCatch);
            token.cancel();
            setTimeout(function () {
                expect(cancelSpy).toHaveBeenCalled();
                done();
            }, 10);
        });
    });
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9saWIvcmVxdWVzdC90b2tlbi5zcGVjLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7R0FlRztBQUVILE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxTQUFTLENBQUM7QUFFeEMsUUFBUSxDQUFDLGVBQWUsRUFBRTtJQUN4QixRQUFRLENBQUMsUUFBUSxFQUFFO1FBQ2pCLElBQU0sS0FBSyxHQUFHLElBQUksYUFBYSxFQUFFLENBQUM7UUFDbEMsRUFBRSxDQUFDLG9EQUFvRCxFQUFFLGNBQU0sT0FBQSxNQUFNLENBQUMsS0FBSyxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxFQUF6QyxDQUF5QyxDQUFDLENBQUM7SUFDNUcsQ0FBQyxDQUFDLENBQUM7SUFFSCxRQUFRLENBQUMsUUFBUSxFQUFFO1FBQ2pCLElBQU0sS0FBSyxHQUFHLElBQUksYUFBYSxFQUFFLENBQUM7UUFDbEMsYUFBYTtRQUNiLEVBQUUsQ0FBQyx1RUFBdUUsRUFBRSxjQUFNLE9BQUEsTUFBTSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsSUFBSSxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsRUFBOUQsQ0FBOEQsQ0FBQyxDQUFDO0lBQ3BKLENBQUMsQ0FBQyxDQUFDO0lBRUgsUUFBUSxDQUFDLGNBQWMsRUFBRTtRQUN2QixFQUFFLENBQUMsbUNBQW1DLEVBQUUsVUFBQSxJQUFJO1lBQzFDLElBQU0sS0FBSyxHQUFHLElBQUksYUFBYSxFQUFFLENBQUM7WUFDbEMsSUFBTSxNQUFNLEdBQUcsS0FBSyxDQUFDLFNBQVMsRUFBRSxDQUFDO1lBQ2pDLElBQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUFDLENBQUM7WUFDbEQsSUFBTSxjQUFjLEdBQUcsSUFBSSxDQUFDLEVBQUUsRUFBRSxDQUFDLFFBQVEsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO1lBRTVELE1BQU0sQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsS0FBSyxDQUFDLGNBQWMsQ0FBQyxDQUFDO1lBRTdDLEtBQUssQ0FBQyxNQUFNLEVBQUUsQ0FBQztZQUVmLFVBQVUsQ0FBQztnQkFDVCxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztnQkFDckMsSUFBSSxFQUFFLENBQUM7WUFDVCxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFDVCxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUMiLCJmaWxlIjoibGliL3JlcXVlc3QvdG9rZW4uc3BlYy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTkgYnkgRmlsZXN0YWNrLlxuICogU29tZSByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IEZzQ2FuY2VsVG9rZW4gfSBmcm9tICcuL3Rva2VuJztcblxuZGVzY3JpYmUoJ1JlcXVlc3QvVG9rZW4nLCAoKSA9PiB7XG4gIGRlc2NyaWJlKCdjYW5jZWwnLCAoKSA9PiB7XG4gICAgY29uc3QgdG9rZW4gPSBuZXcgRnNDYW5jZWxUb2tlbigpO1xuICAgIGl0KCdjYW5jZWwgdG9rZW4gc2hvdWxkIHJldHVybiB1bmRlZmluZWQgd2l0aG91dCB2YWx1ZScsICgpID0+IGV4cGVjdCh0b2tlbi5jYW5jZWwoKSkudG9FcXVhbCh1bmRlZmluZWQpKTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ2NhbmNlbCcsICgpID0+IHtcbiAgICBjb25zdCB0b2tlbiA9IG5ldyBGc0NhbmNlbFRva2VuKCk7XG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIGl0KFwiY2FuY2VsIHRva2VuIHNob3VsZCByZXR1cm4gdW5kZWZpbmVkIHdpdGggdmFsdWUgbmV3IFN0cmluZygnQWJvcnRlZCcpXCIsICgpID0+IGV4cGVjdCh0b2tlbi5jYW5jZWwobmV3IFN0cmluZygnQWJvcnRlZCcpKSkudG9FcXVhbCh1bmRlZmluZWQpKTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ3NvdXJjZSB0b2tlbicsICgpID0+IHtcbiAgICBpdCgnc291cmNlIHRva2VuIHNob3VsZCByZXR1cm4gY2FsbGVkJywgZG9uZSA9PiB7XG4gICAgICBjb25zdCB0b2tlbiA9IG5ldyBGc0NhbmNlbFRva2VuKCk7XG4gICAgICBjb25zdCBzb3VyY2UgPSB0b2tlbi5nZXRTb3VyY2UoKTtcbiAgICAgIGNvbnN0IGNhbmNlbFNweSA9IGplc3QuZm4oKS5tb2NrTmFtZSgnY2FuY2VsU3B5Jyk7XG4gICAgICBjb25zdCBjYW5jZWxTcHlDYXRjaCA9IGplc3QuZm4oKS5tb2NrTmFtZSgnY2FuY2VsU3B5Q2F0Y2gnKTtcblxuICAgICAgc291cmNlLnRoZW4oY2FuY2VsU3B5KS5jYXRjaChjYW5jZWxTcHlDYXRjaCk7XG5cbiAgICAgIHRva2VuLmNhbmNlbCgpO1xuXG4gICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgZXhwZWN0KGNhbmNlbFNweSkudG9IYXZlQmVlbkNhbGxlZCgpO1xuICAgICAgICBkb25lKCk7XG4gICAgICB9LCAxMCk7XG4gICAgfSk7XG4gIH0pO1xufSk7XG4iXX0=
