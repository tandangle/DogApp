import { __extends } from "tslib";
/**
 * Filestack error codes (common for browser and node)
 *
 * @export
 * @enum {number}
 */
export var FsRequestErrorCode;
(function (FsRequestErrorCode) {
    FsRequestErrorCode["ABORTED"] = "ABORTED";
    FsRequestErrorCode["NETWORK"] = "NETWORK";
    FsRequestErrorCode["TIMEOUT"] = "TIMEDOUT";
    FsRequestErrorCode["SERVER"] = "SERVER";
    FsRequestErrorCode["REQUEST"] = "REQUEST";
    FsRequestErrorCode["OTHER"] = "OTHER";
    FsRequestErrorCode["REDIRECT"] = "REDIRECT";
})(FsRequestErrorCode || (FsRequestErrorCode = {}));
/**
 * Custom Filestack Request error class
 *
 * @export
 * @class FsRequestError
 * @extends {Error}
 */
var FsRequestError = /** @class */ (function (_super) {
    __extends(FsRequestError, _super);
    /**
     * Creates an instance of FsRequestError.
     *
     * @param {string} message
     * @param {*} config
     * @param {FsResponse} [response]
     * @param {FsRequestErrorCode} [code]
     * @memberof FsRequestError
     */
    function FsRequestError(message, config, response, code) {
        var _newTarget = this.constructor;
        var _this = 
        /* istanbul ignore next */
        _super.call(this, message) || this;
        _this.config = config;
        _this.response = response;
        _this.code = code;
        // const captureStackTrace: Function = (Error as any).captureStackTrace;
        // captureStackTrace && captureStackTrace(this);
        fixProto(_this, _newTarget.prototype);
        return _this;
    }
    return FsRequestError;
}(Error));
export { FsRequestError };
function fixProto(target, prototype) {
    var setPrototypeOf = Object.setPrototypeOf;
    /* istanbul ignore next */
    setPrototypeOf ? setPrototypeOf(target, prototype) : (target.__proto__ = prototype);
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9saWIvcmVxdWVzdC9lcnJvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBa0JBOzs7OztHQUtHO0FBQ0gsTUFBTSxDQUFOLElBQVksa0JBUVg7QUFSRCxXQUFZLGtCQUFrQjtJQUM1Qix5Q0FBbUIsQ0FBQTtJQUNuQix5Q0FBbUIsQ0FBQTtJQUNuQiwwQ0FBb0IsQ0FBQTtJQUNwQix1Q0FBaUIsQ0FBQTtJQUNqQix5Q0FBbUIsQ0FBQTtJQUNuQixxQ0FBZSxDQUFBO0lBQ2YsMkNBQXFCLENBQUE7QUFDdkIsQ0FBQyxFQVJXLGtCQUFrQixLQUFsQixrQkFBa0IsUUFRN0I7QUFFRDs7Ozs7O0dBTUc7QUFDSDtJQUFvQyxrQ0FBSztJQVd2Qzs7Ozs7Ozs7T0FRRztJQUNILHdCQUFZLE9BQWUsRUFBRSxNQUFXLEVBQUUsUUFBcUIsRUFBRSxJQUF5Qjs7UUFBMUY7UUFDRSwwQkFBMEI7UUFDMUIsa0JBQU0sT0FBTyxDQUFDLFNBU2Y7UUFQQyxLQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztRQUNyQixLQUFJLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQztRQUN6QixLQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztRQUVqQix3RUFBd0U7UUFDeEUsZ0RBQWdEO1FBQ2hELFFBQVEsQ0FBQyxLQUFJLEVBQUUsV0FBVyxTQUFTLENBQUMsQ0FBQzs7SUFDdkMsQ0FBQztJQUNILHFCQUFDO0FBQUQsQ0FoQ0EsQUFnQ0MsQ0FoQ21DLEtBQUssR0FnQ3hDOztBQUVELFNBQVMsUUFBUSxDQUFDLE1BQWEsRUFBRSxTQUFhO0lBQzVDLElBQU0sY0FBYyxHQUFjLE1BQWMsQ0FBQyxjQUFjLENBQUM7SUFDaEUsMEJBQTBCO0lBQzFCLGNBQWMsQ0FBQyxDQUFDLENBQUMsY0FBYyxDQUFDLE1BQU0sRUFBRSxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBRSxNQUFjLENBQUMsU0FBUyxHQUFHLFNBQVMsQ0FBQyxDQUFDO0FBQy9GLENBQUMiLCJmaWxlIjoibGliL3JlcXVlc3QvZXJyb3IuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogQ29weXJpZ2h0IChjKSAyMDE4IGJ5IEZpbGVzdGFjay5cbiAqIFNvbWUgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuaW1wb3J0IHsgRnNSZXF1ZXN0T3B0aW9ucywgRnNSZXNwb25zZSB9IGZyb20gJy4vdHlwZXMnO1xuXG4vKipcbiAqIEZpbGVzdGFjayBlcnJvciBjb2RlcyAoY29tbW9uIGZvciBicm93c2VyIGFuZCBub2RlKVxuICpcbiAqIEBleHBvcnRcbiAqIEBlbnVtIHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBlbnVtIEZzUmVxdWVzdEVycm9yQ29kZSB7XG4gIEFCT1JURUQgPSAnQUJPUlRFRCcsXG4gIE5FVFdPUksgPSAnTkVUV09SSycsXG4gIFRJTUVPVVQgPSAnVElNRURPVVQnLFxuICBTRVJWRVIgPSAnU0VSVkVSJyxcbiAgUkVRVUVTVCA9ICdSRVFVRVNUJyxcbiAgT1RIRVIgPSAnT1RIRVInLFxuICBSRURJUkVDVCA9ICdSRURJUkVDVCcsXG59XG5cbi8qKlxuICogQ3VzdG9tIEZpbGVzdGFjayBSZXF1ZXN0IGVycm9yIGNsYXNzXG4gKlxuICogQGV4cG9ydFxuICogQGNsYXNzIEZzUmVxdWVzdEVycm9yXG4gKiBAZXh0ZW5kcyB7RXJyb3J9XG4gKi9cbmV4cG9ydCBjbGFzcyBGc1JlcXVlc3RFcnJvciBleHRlbmRzIEVycm9yIHtcbiAgLyoqXG4gICAqIEVycm9yIGRldGFpbHMsIGllIHZhbGlkYXRpb24gZXJyb3JzXG4gICAqXG4gICAqIEB0eXBlIHsqfVxuICAgKiBAbWVtYmVyb2YgRmlsZXN0YWNrRXJyb3JcbiAgICovXG4gIHB1YmxpYyByZWFkb25seSBjb25maWc6IEZzUmVxdWVzdE9wdGlvbnM7XG4gIHB1YmxpYyByZWFkb25seSByZXNwb25zZTogRnNSZXNwb25zZTtcbiAgcHVibGljIHJlYWRvbmx5IGNvZGU6IEZzUmVxdWVzdEVycm9yQ29kZTtcblxuICAvKipcbiAgICogQ3JlYXRlcyBhbiBpbnN0YW5jZSBvZiBGc1JlcXVlc3RFcnJvci5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IG1lc3NhZ2VcbiAgICogQHBhcmFtIHsqfSBjb25maWdcbiAgICogQHBhcmFtIHtGc1Jlc3BvbnNlfSBbcmVzcG9uc2VdXG4gICAqIEBwYXJhbSB7RnNSZXF1ZXN0RXJyb3JDb2RlfSBbY29kZV1cbiAgICogQG1lbWJlcm9mIEZzUmVxdWVzdEVycm9yXG4gICAqL1xuICBjb25zdHJ1Y3RvcihtZXNzYWdlOiBzdHJpbmcsIGNvbmZpZzogYW55LCByZXNwb25zZT86IEZzUmVzcG9uc2UsIGNvZGU/OiBGc1JlcXVlc3RFcnJvckNvZGUpIHtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgIHN1cGVyKG1lc3NhZ2UpO1xuXG4gICAgdGhpcy5jb25maWcgPSBjb25maWc7XG4gICAgdGhpcy5yZXNwb25zZSA9IHJlc3BvbnNlO1xuICAgIHRoaXMuY29kZSA9IGNvZGU7XG5cbiAgICAvLyBjb25zdCBjYXB0dXJlU3RhY2tUcmFjZTogRnVuY3Rpb24gPSAoRXJyb3IgYXMgYW55KS5jYXB0dXJlU3RhY2tUcmFjZTtcbiAgICAvLyBjYXB0dXJlU3RhY2tUcmFjZSAmJiBjYXB0dXJlU3RhY2tUcmFjZSh0aGlzKTtcbiAgICBmaXhQcm90byh0aGlzLCBuZXcudGFyZ2V0LnByb3RvdHlwZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZml4UHJvdG8odGFyZ2V0OiBFcnJvciwgcHJvdG90eXBlOiB7fSkge1xuICBjb25zdCBzZXRQcm90b3R5cGVPZjogRnVuY3Rpb24gPSAoT2JqZWN0IGFzIGFueSkuc2V0UHJvdG90eXBlT2Y7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gIHNldFByb3RvdHlwZU9mID8gc2V0UHJvdG90eXBlT2YodGFyZ2V0LCBwcm90b3R5cGUpIDogKCh0YXJnZXQgYXMgYW55KS5fX3Byb3RvX18gPSBwcm90b3R5cGUpO1xufVxuIl19
