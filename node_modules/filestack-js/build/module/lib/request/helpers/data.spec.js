/*
 * Copyright (c) 2018 by Filestack
 * Some rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { __awaiter, __generator } from "tslib";
import { prepareData, parseResponse } from './data';
describe('Request/Helpers/Data', function () {
    describe('prepare data', function () {
        it('should return empty data', function () {
            var data = { url: 'https://filestack.com', data: {} };
            expect(prepareData(data)).toEqual(data);
        });
        it('should return ArrayBuffer', function () {
            var data = { url: 'https://filestack.com', data: new ArrayBuffer(10) };
            expect(prepareData(data)).toEqual(data);
        });
        it('should return url params', function () {
            var data = { url: 'https://filestack.com', data: new URLSearchParams('q=search&id=1') };
            expect(prepareData(data)).toEqual(data);
        });
    });
    describe('parse response', function () {
        it('should return equal response data', function () { return __awaiter(void 0, void 0, void 0, function () {
            var response, _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        response = {
                            status: 200,
                            statusText: 'ok',
                            headers: {},
                            data: [],
                            config: {
                                url: 'https://filestack.com',
                            },
                        };
                        _a = expect;
                        return [4 /*yield*/, parseResponse(response)];
                    case 1:
                        _a.apply(void 0, [_b.sent()]).toEqual(response);
                        return [2 /*return*/];
                }
            });
        }); });
        it('should return response with application/json and data stringify', function () { return __awaiter(void 0, void 0, void 0, function () {
            var response, _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        response = {
                            status: 200,
                            statusText: 'ok',
                            headers: {
                                'content-type': 'application/json',
                            },
                            data: JSON.stringify({ a: 1 }),
                            config: {
                                url: 'https://filestack.com',
                            },
                        };
                        _a = expect;
                        return [4 /*yield*/, parseResponse(response)];
                    case 1:
                        _a.apply(void 0, [_b.sent()]).toEqual(response);
                        return [2 /*return*/];
                }
            });
        }); });
        it('should return response with application/json and json data ', function () { return __awaiter(void 0, void 0, void 0, function () {
            var response, _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        response = {
                            status: 200,
                            statusText: 'ok',
                            headers: {
                                'content-type': 'application/json',
                            },
                            data: { a: 1 },
                            config: {
                                url: 'https://filestack.com',
                            },
                        };
                        _a = expect;
                        return [4 /*yield*/, parseResponse(response)];
                    case 1:
                        _a.apply(void 0, [_b.sent()]).toEqual(response);
                        return [2 /*return*/];
                }
            });
        }); });
        it('should return text/plain response with ArrayBuffer ', function () { return __awaiter(void 0, void 0, void 0, function () {
            var response, _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        response = {
                            status: 200,
                            statusText: 'ok',
                            headers: {
                                'content-type': 'text/plain',
                            },
                            data: new ArrayBuffer(10),
                            config: {
                                url: 'https://filestack.com',
                            },
                        };
                        _a = expect;
                        return [4 /*yield*/, parseResponse(response)];
                    case 1:
                        _a.apply(void 0, [_b.sent()]).toEqual(response);
                        return [2 /*return*/];
                }
            });
        }); });
        it('should parse application/xml response to json', function () { return __awaiter(void 0, void 0, void 0, function () {
            var response, res;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        response = {
                            status: 200,
                            statusText: 'ok',
                            headers: {
                                'content-type': 'application/xml',
                            },
                            data: Buffer.from('<?xml version="1.0" encoding="UTF-8"?><Error><code>RequestTimeTooSkewed</code><Message>The difference between the request time and the current time is toolarge.</Message><RequestTime>20191102T153031Z</RequestTime><ServerTime>2019-11-02T15:56:35Z</ServerTime><MaxAllowedSkewMilliseconds>900000</MaxAllowedSkewMilliseconds><RequestId>6C8855BC97D17A1B</RequestId><HostId>3bwhtSpY9tAypFr9L6V+W6UAxFUyk7mK+VQGhIu4Bxj0t7jhQWMEEinW4YHpi8Q9qONnx1CEHKE=</HostId></Error>'),
                            config: {
                                url: 'https://filestack.com',
                            },
                        };
                        return [4 /*yield*/, parseResponse(response)];
                    case 1:
                        res = _a.sent();
                        return [2 /*return*/, expect(res.data).toEqual({
                                Error: {
                                    code: 'RequestTimeTooSkewed',
                                    Message: 'The difference between the request time and the current time is toolarge.',
                                    RequestTime: '20191102T153031Z',
                                    ServerTime: '2019-11-02T15:56:35Z',
                                    MaxAllowedSkewMilliseconds: 900000,
                                    RequestId: '6C8855BC97D17A1B',
                                    HostId: '3bwhtSpY9tAypFr9L6V+W6UAxFUyk7mK+VQGhIu4Bxj0t7jhQWMEEinW4YHpi8Q9qONnx1CEHKE=',
                                },
                            })];
                }
            });
        }); });
    });
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,
