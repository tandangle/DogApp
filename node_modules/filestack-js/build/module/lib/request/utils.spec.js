/*
 * Copyright (c) 2019 by Filestack.
 * Some rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import * as utils from './utils';
import { Readable } from 'stream';
var printLog = function (status, name, value) { return name + " should return " + status + " when value is " + value; };
describe('Request/Utils', function () {
    describe('isArray', function () {
        it(printLog(true, 'isArray', "['value']"), function () { return expect(utils.isArray(['value'])).toBeTruthy(); });
        it(printLog(true, 'isArray', '[]'), function () { return expect(utils.isArray([])).toBeTruthy(); });
        // @ts-ignore
        it(printLog(true, 'isArray', ''), function () { return expect(utils.isArray()).toBeFalsy(); });
        // @ts-ignore
        it(printLog(true, 'isArray', null), function () { return expect(utils.isArray(null)).toBeFalsy(); });
    });
    describe('isArrayBuffer', function () {
        it(printLog(true, 'isArrayBuffer', 'new ArrayBuffer(10)'), function () {
            expect(utils.isArrayBuffer(new ArrayBuffer(10))).toBeTruthy();
        });
        it(printLog(true, 'isArrayBuffer', ''), function () {
            // @ts-ignore
            expect(utils.isArrayBuffer()).toBeFalsy();
        });
    });
    // isBuffer
    describe('isBuffer', function () {
        it(printLog(true, 'isBuffer', ''), function () {
            // @ts-ignore
            expect(utils.isBuffer(null)).toBeFalsy();
        });
        it(printLog(true, 'isBuffer', ''), function () {
            // @ts-ignore
            expect(utils.isBuffer(Buffer.alloc(10))).toBeTruthy();
        });
    });
    describe('isArrayBufferView', function () {
        it(printLog(true, 'isArrayBufferView', 'new DataView(new ArrayBuffer(10))'), function () {
            expect(utils.isArrayBufferView(new DataView(new ArrayBuffer(10)))).toBeTruthy();
        });
        it(printLog(true, 'isArrayBufferView', null), function () {
            // @ts-ignore
            expect(utils.isArrayBufferView(null)).toBeFalsy();
        });
        it(printLog(true, 'isArrayBufferView', null), function () {
            // @ts-ignore
            expect(utils.isArrayBufferView(Buffer.alloc(10))).toBeTruthy();
        });
    });
    describe('isObject', function () {
        it(printLog(true, 'isObject', "{prop: 'value'}"), function () { return expect(utils.isObject({ prop: 'value' })).toBeTruthy(); });
        it(printLog(false, 'isObject', "'value'"), function () { return expect(utils.isObject('value')).toBeFalsy(); });
        it(printLog(false, 'isObject', '10'), function () { return expect(utils.isObject(10)).toBeFalsy(); });
    });
    describe('isString', function () {
        it(printLog(true, 'isString', "'value'"), function () { return expect(utils.isString('value')).toBeTruthy(); });
        it(printLog(false, 'isString', '10'), function () { return expect(utils.isString(10)).toBeFalsy(); });
        it(printLog(false, 'isString', '{}'), function () { return expect(utils.isString({})).toBeFalsy(); });
        it(printLog(false, 'isString', '[]'), function () { return expect(utils.isString([])).toBeFalsy(); });
        it(printLog(false, 'isString', 'false'), function () { return expect(utils.isString(false)).toBeFalsy(); });
    });
    describe('isFile', function () {
        it(printLog(false, 'isFile', null), function () { return expect(utils.isFile(null)).toBeFalsy(); });
    });
    describe('isBlob', function () {
        it(printLog(false, 'isBlob', null), function () { return expect(utils.isBlob(null)).toBeFalsy(); });
    });
    describe('isStream', function () {
        it(printLog(true, 'isStream', 'Stream.Readable()'), function () {
            var stream = new Readable();
            stream._read = function () { return ''; };
            stream.push('beep');
            expect(utils.isStream(stream)).toBeTruthy();
        });
        it(printLog(true, 'isStream', "'value'"), function () { return expect(utils.isStream('value')).toBeFalsy(); });
        it(printLog(true, 'isStream', '10'), function () { return expect(utils.isStream(10)).toBeFalsy(); });
        it(printLog(true, 'isStream', '[]'), function () { return expect(utils.isStream([])).toBeFalsy(); });
    });
    describe('isURLSearchParams', function () {
        it(printLog(true, 'isURLSearchParams', "new URLSearchParams('q=filename=&size=12')"), function () {
            expect(utils.isURLSearchParams(new URLSearchParams('q=filename=&size=12'))).toBeTruthy();
        });
        it(printLog(true, 'isURLSearchParams', "new URLSearchParams('')"), function () {
            expect(utils.isURLSearchParams(new URLSearchParams(''))).toBeTruthy();
        });
    });
    describe('isFormData', function () {
        it(printLog(true, 'isFormData', "'value'"), function () { return expect(utils.isFormData('value')).toBeFalsy(); });
        it(printLog(true, 'isFormData', '10'), function () { return expect(utils.isFormData({})).toBeFalsy(); });
        it(printLog(true, 'isFormData', '[]'), function () { return expect(utils.isFormData([])).toBeFalsy(); });
        it(printLog(true, 'isFormData', '{}'), function () { return expect(utils.isFormData({})).toBeFalsy(); });
    });
    describe('trim', function () {
        it(printLog("'value' without whitespace", 'trim', "' value'"), function () { return expect(utils.trim(' value')).toEqual('value'); });
        it(printLog("'value' without whitespace ", 'trim', "' value '"), function () { return expect(utils.trim(' value ')).toEqual('value'); });
    });
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9saWIvcmVxdWVzdC91dGlscy5zcGVjLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7R0FlRztBQUVILE9BQU8sS0FBSyxLQUFLLE1BQU0sU0FBUyxDQUFDO0FBQ2pDLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxRQUFRLENBQUM7QUFFbEMsSUFBTSxRQUFRLEdBQUcsVUFBQyxNQUF3QixFQUFFLElBQVksRUFBRSxLQUFhLElBQWEsT0FBRyxJQUFJLHVCQUFrQixNQUFNLHVCQUFrQixLQUFPLEVBQXhELENBQXdELENBQUM7QUFFN0ksUUFBUSxDQUFDLGVBQWUsRUFBRTtJQUN4QixRQUFRLENBQUMsU0FBUyxFQUFFO1FBQ2xCLEVBQUUsQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLFNBQVMsRUFBRSxXQUFXLENBQUMsRUFBRSxjQUFNLE9BQUEsTUFBTSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsVUFBVSxFQUFFLEVBQTdDLENBQTZDLENBQUMsQ0FBQztRQUVoRyxFQUFFLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxTQUFTLEVBQUUsSUFBSSxDQUFDLEVBQUUsY0FBTSxPQUFBLE1BQU0sQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsVUFBVSxFQUFFLEVBQXRDLENBQXNDLENBQUMsQ0FBQztRQUVsRixhQUFhO1FBQ2IsRUFBRSxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsU0FBUyxFQUFFLEVBQUUsQ0FBQyxFQUFFLGNBQU0sT0FBQSxNQUFNLENBQUMsS0FBSyxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUMsU0FBUyxFQUFFLEVBQW5DLENBQW1DLENBQUMsQ0FBQztRQUU3RSxhQUFhO1FBQ2IsRUFBRSxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsU0FBUyxFQUFFLElBQUksQ0FBQyxFQUFFLGNBQU0sT0FBQSxNQUFN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U0FBUyxFQUFFLEVBQTNDLENBQTJDLENBQUMsQ0FBQztRQUU5RixFQUFFLENBQUMsUUFBUSxDQUFDLEtBQUssRUFBRSxVQUFVLEVBQUUsSUFBSSxDQUFDLEVBQUUsY0FBTSxPQUFBLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsU0FBUyxFQUFFLEVBQXRDLENBQXNDLENBQUMsQ0FBQztJQUN0RixDQUFDLENBQUMsQ0FBQztJQUVILFFBQVEsQ0FBQyxVQUFVLEVBQUU7UUFDbkIsRUFBRSxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsVUFBVSxFQUFFLFNBQVMsQ0FBQyxFQUFFLGNBQU0sT0FBQSxNQUFNLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLFVBQVUsRUFBRSxFQUE1QyxDQUE0QyxDQUFDLENBQUM7UUFFOUYsRUFBRSxDQUFDLFFBQVEsQ0FBQyxLQUFLLEVBQUUsVUFBVSxFQUFFLElBQUksQ0FBQyxFQUFFLGNBQU0sT0FBQSxNQUFNLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLFNBQVMsRUFBRSxFQUF0QyxDQUFzQyxDQUFDLENBQUM7UUFFcEYsRUFBRSxDQUFDLFFBQVEsQ0FBQyxLQUFLLEVBQUUsVUFBVSxFQUFFLElBQUksQ0FBQyxFQUFFLGNBQU0sT0FBQSxNQUFNLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLFNBQVMsRUFBRSxFQUF0QyxDQUFzQyxDQUFDLENBQUM7UUFFcEYsRUFBRSxDQUFDLFFBQVEsQ0FBQyxLQUFLLEVBQUUsVUFBVSxFQUFFLElBQUksQ0FBQyxFQUFFLGNBQU0sT0FBQSxNQUFNLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLFNBQVMsRUFBRSxFQUF0QyxDQUFzQyxDQUFDLENBQUM7UUFFcEYsRUFBRSxDQUFDLFFBQVEsQ0FBQyxLQUFLLEVBQUUsVUFBVSxFQUFFLE9BQU8sQ0FBQyxF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QU8sQ0FBQyxFQUE5QyxDQUE4QyxDQUFDLENBQUM7SUFDekgsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMsQ0FBQyIsImZpbGUiOiJsaWIvcmVxdWVzdC91dGlscy5zcGVjLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIENvcHlyaWdodCAoYykgMjAxOSBieSBGaWxlc3RhY2suXG4gKiBTb21lIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0ICogYXMgdXRpbHMgZnJvbSAnLi91dGlscyc7XG5pbXBvcnQgeyBSZWFkYWJsZSB9IGZyb20gJ3N0cmVhbSc7XG5cbmNvbnN0IHByaW50TG9nID0gKHN0YXR1czogYm9vbGVhbiB8IHN0cmluZywgbmFtZTogc3RyaW5nLCB2YWx1ZTogc3RyaW5nKTogc3RyaW5nID0+IGAke25hbWV9IHNob3VsZCByZXR1cm4gJHtzdGF0dXN9IHdoZW4gdmFsdWUgaXMgJHt2YWx1ZX1gO1xuXG5kZXNjcmliZSgnUmVxdWVzdC9VdGlscycsICgpID0+IHtcbiAgZGVzY3JpYmUoJ2lzQXJyYXknLCAoKSA9PiB7XG4gICAgaXQocHJpbnRMb2codHJ1ZSwgJ2lzQXJyYXknLCBcIlsndmFsdWUnXVwiKSwgKCkgPT4gZXhwZWN0KHV0aWxzLmlzQXJyYXkoWyd2YWx1ZSddKSkudG9CZVRydXRoeSgpKTtcblxuICAgIGl0KHByaW50TG9nKHRydWUsICdpc0FycmF5JywgJ1tdJyksICgpID0+IGV4cGVjdCh1dGlscy5pc0FycmF5KFtdKSkudG9CZVRydXRoeSgpKTtcblxuICAgIC8vIEB0cy1pZ25vcmVcbiAgICBpdChwcmludExvZyh0cnVlLCAnaXNBcnJheScsICcnKSwgKCkgPT4gZXhwZWN0KHV0aWxzLmlzQXJyYXkoKSkudG9CZUZhbHN5KCkpO1xuXG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIGl0KHByaW50TG9nKHRydWUsICdpc0FycmF5JywgbnVsbCksICgpID0+IGV4cGVjdCh1dGlscy5pc0FycmF5KG51bGwpKS50b0JlRmFsc3koKSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdpc0FycmF5QnVmZmVyJywgKCkgPT4ge1xuICAgIGl0KHByaW50TG9nKHRydWUsICdpc0FycmF5QnVmZmVyJywgJ25ldyBBcnJheUJ1ZmZlcigxMCknKSwgKCkgPT4ge1xuICAgICAgZXhwZWN0KHV0aWxzLmlzQXJyYXlCdWZmZXIobmV3IEFycmF5QnVmZmVyKDEwKSkpLnRvQmVUcnV0aHkoKTtcbiAgICB9KTtcbiAgICBpdChwcmludExvZyh0cnVlLCAnaXNBcnJheUJ1ZmZlcicsICcnKSwgKCkgPT4ge1xuICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgZXhwZWN0KHV0aWxzLmlzQXJyYXlCdWZmZXIoKSkudG9CZUZhbHN5KCk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIC8vIGlzQnVmZmVyXG4gIGRlc2NyaWJlKCdpc0J1ZmZlcicsICgpID0+IHtcbiAgICBpdChwcmludExvZyh0cnVlLCAnaXNCdWZmZXInLCAnJyksICgpID0+IHtcbiAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgIGV4cGVjdCh1dGlscy5pc0J1ZmZlcihudWxsKSkudG9CZUZhbHN5KCk7XG4gICAgfSk7XG4gICAgaXQocHJpbnRMb2codHJ1ZSwgJ2lzQnVmZmVyJywgJycpLCAoKSA9PiB7XG4gICAgICAvLyBAdHMtaWdub3JlXG4gICAgICBleHBlY3QodXRpbHMuaXNCdWZmZXIoQnVmZmVyLmFsbG9jKDEwKSkpLnRvQmVUcnV0aHkoKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ2lzQXJyYXlCdWZmZXJWaWV3JywgKCkgPT4ge1xuICAgIGl0KHByaW50TG9nKHRydWUsICdpc0FycmF5QnVmZmVyVmlldycsICduZXcgRGF0YVZpZXcobmV3IEFycmF5QnVmZmVyKDEwKSknKSwgKCkgPT4ge1xuICAgICAgZXhwZWN0KHV0aWxzLmlzQXJyYXlCdWZmZXJWaWV3KG5ldyBEYXRhVmlldyhuZXcgQXJyYXlCdWZmZXIoMTApKSkpLnRvQmVUcnV0aHkoKTtcbiAgICB9KTtcblxuICAgIGl0KHByaW50TG9nKHRydWUsICdpc0FycmF5QnVmZmVyVmlldycsIG51bGwpLCAoKSA9PiB7XG4gICAgICAvLyBAdHMtaWdub3JlXG4gICAgICBleHBlY3QodXRpbHMuaXNBcnJheUJ1ZmZlclZpZXcobnVsbCkpLnRvQmVGYWxzeSgpO1xuICAgIH0pO1xuXG4gICAgaXQocHJpbnRMb2codHJ1ZSwgJ2lzQXJyYXlCdWZmZXJWaWV3JywgbnVsbCksICgpID0+IHtcbiAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgIGV4cGVjdCh1dGlscy5pc0FycmF5QnVmZmVyVmlldyhCdWZmZXIuYWxsb2MoMTApKSkudG9CZVRydXRoeSgpO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnaXNPYmplY3QnLCAoKSA9PiB7XG4gICAgaXQocHJpbnRMb2codHJ1ZSwgJ2lzT2JqZWN0JywgXCJ7cHJvcDogJ3ZhbHVlJ31cIiksICgpID0+IGV4cGVjdCh1dGlscy5pc09iamVjdCh7IHByb3A6ICd2YWx1ZScgfSkpLnRvQmVUcnV0aHkoKSk7XG5cbiAgICBpdChwcmludExvZyhmYWxzZSwgJ2lzT2JqZWN0JywgXCIndmFsdWUnXCIpLCAoKSA9PiBleHBlY3QodXRpbHMuaXNPYmplY3QoJ3ZhbHVlJykpLnRvQmVGYWxzeSgpKTtcblxuICAgIGl0KHByaW50TG9nKGZhbHNlLCAnaXNPYmplY3QnLCAnMTAnKSwgKCkgPT4gZXhwZWN0KHV0aWxzLmlzT2JqZWN0KDEwKSkudG9CZUZhbHN5KCkpO1xuICB9KTtcblxuICBkZXNjcmliZSgnaXNTdHJpbmcnLCAoKSA9PiB7XG4gICAgaXQocHJpbnRMb2codHJ1ZSwgJ2lzU3RyaW5nJywgXCIndmFsdWUnXCIpLCAoKSA9PiBleHBlY3QodXRpbHMuaXNTdHJpbmcoJ3ZhbHVlJykpLnRvQmVUcnV0aHkoKSk7XG5cbiAgICBpdChwcmludExvZyhmYWxzZSwgJ2lzU3RyaW5nJywgJzEwJyksICgpID0+IGV4cGVjdCh1dGlscy5pc1N0cmluZygxMCkpLnRvQmVGYWxzeSgpKTtcblxuICAgIGl0KHByaW50TG9nKGZhbHNlLCAnaXNTdHJpbmcnLCAne30nKSwgKCkgPT4gZXhwZWN0KHV0aWxzLmlzU3RyaW5nKHt9KSkudG9CZUZhbHN5KCkpO1xuXG4gICAgaXQocHJpbnRMb2coZmFsc2UsICdpc1N0cmluZycsICdbXScpLCAoKSA9PiBleHBlY3QodXRpbHMuaXNTdHJpbmcoW10pKS50b0JlRmFsc3koKSk7XG5cbiAgICBpdChwcmludExvZyhmYWxzZSwgJ2lzU3RyaW5nJywgJ2ZhbHNlJyksICgpID0+IGV4cGVjdCh1dGlscy5pc1N0cmluZyhmYWxzZSkpLnRvQmVGYWxzeSgpKTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ2lzRmlsZScsICgpID0+IHtcbiAgICBpdChwcmludExvZyhmYWxzZSwgJ2lzRmlsZScsIG51bGwpLCAoKSA9PiBleHBlY3QodXRpbHMuaXNGaWxlKG51bGwpKS50b0JlRmFsc3koKSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdpc0Jsb2InLCAoKSA9PiB7XG4gICAgaXQocHJpbnRMb2coZmFsc2UsICdpc0Jsb2InLCBudWxsKSwgKCkgPT4gZXhwZWN0KHV0aWxzLmlzQmxvYihudWxsKSkudG9CZUZhbHN5KCkpO1xuICB9KTtcblxuICBkZXNjcmliZSgnaXNTdHJlYW0nLCAoKSA9PiB7XG4gICAgaXQocHJpbnRMb2codHJ1ZSwgJ2lzU3RyZWFtJywgJ1N0cmVhbS5SZWFkYWJsZSgpJyksICgpID0+IHtcbiAgICAgIGNvbnN0IHN0cmVhbSA9IG5ldyBSZWFkYWJsZSgpO1xuICAgICAgc3RyZWFtLl9yZWFkID0gKCkgPT4gJyc7XG4gICAgICBzdHJlYW0ucHVzaCgnYmVlcCcpO1xuICAgICAgZXhwZWN0KHV0aWxzLmlzU3RyZWFtKHN0cmVhbSkpLnRvQmVUcnV0aHkoKTtcbiAgICB9KTtcblxuICAgIGl0KHByaW50TG9nKHRydWUsICdpc1N0cmVhbScsIFwiJ3ZhbHVlJ1wiKSwgKCkgPT4gZXhwZWN0KHV0aWxzLmlzU3RyZWFtKCd2YWx1ZScpKS50b0JlRmFsc3koKSk7XG5cbiAgICBpdChwcmludExvZyh0cnVlLCAnaXNTdHJlYW0nLCAnMTAnKSwgKCkgPT4gZXhwZWN0KHV0aWxzLmlzU3RyZWFtKDEwKSkudG9CZUZhbHN5KCkpO1xuXG4gICAgaXQocHJpbnRMb2codHJ1ZSwgJ2lzU3RyZWFtJywgJ1tdJyksICgpID0+IGV4cGVjdCh1dGlscy5pc1N0cmVhbShbXSkpLnRvQmVGYWxzeSgpKTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ2lzVVJMU2VhcmNoUGFyYW1zJywgKCkgPT4ge1xuICAgIGl0KHByaW50TG9nKHRydWUsICdpc1VSTFNlYXJjaFBhcmFtcycsIFwibmV3IFVSTFNlYXJjaFBhcmFtcygncT1maWxlbmFtZT0mc2l6ZT0xMicpXCIpLCAoKSA9PiB7XG4gICAgICBleHBlY3QodXRpbHMuaXNVUkxTZWFyY2hQYXJhbXMobmV3IFVSTFNlYXJjaFBhcmFtcygncT1maWxlbmFtZT0mc2l6ZT0xMicpKSkudG9CZVRydXRoeSgpO1xuICAgIH0pO1xuXG4gICAgaXQocHJpbnRMb2codHJ1ZSwgJ2lzVVJMU2VhcmNoUGFyYW1zJywgXCJuZXcgVVJMU2VhcmNoUGFyYW1zKCcnKVwiKSwgKCkgPT4ge1xuICAgICAgZXhwZWN0KHV0aWxzLmlzVVJMU2VhcmNoUGFyYW1zKG5ldyBVUkxTZWFyY2hQYXJhbXMoJycpKSkudG9CZVRydXRoeSgpO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnaXNGb3JtRGF0YScsICgpID0+IHtcbiAgICBpdChwcmludExvZyh0cnVlLCAnaXNGb3JtRGF0YScsIFwiJ3ZhbHVlJ1wiKSwgKCkgPT4gZXhwZWN0KHV0aWxzLmlzRm9ybURhdGEoJ3ZhbHVlJykpLnRvQmVGYWxzeSgpKTtcblxuICAgIGl0KHByaW50TG9nKHRydWUsICdpc0Zvcm1EYXRhJywgJzEwJyksICgpID0+IGV4cGVjdCh1dGlscy5pc0Zvcm1EYXRhKHt9KSkudG9CZUZhbHN5KCkpO1xuXG4gICAgaXQocHJpbnRMb2codHJ1ZSwgJ2lzRm9ybURhdGEnLCAnW10nKSwgKCkgPT4gZXhwZWN0KHV0aWxzLmlzRm9ybURhdGEoW10pKS50b0JlRmFsc3koKSk7XG5cbiAgICBpdChwcmludExvZyh0cnVlLCAnaXNGb3JtRGF0YScsICd7fScpLCAoKSA9PiBleHBlY3QodXRpbHMuaXNGb3JtRGF0YSh7fSkpLnRvQmVGYWxzeSgpKTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ3RyaW0nLCAoKSA9PiB7XG4gICAgaXQocHJpbnRMb2coXCIndmFsdWUnIHdpdGhvdXQgd2hpdGVzcGFjZVwiLCAndHJpbScsIFwiJyB2YWx1ZSdcIiksICgpID0+IGV4cGVjdCh1dGlscy50cmltKCcgdmFsdWUnKSkudG9FcXVhbCgndmFsdWUnKSk7XG5cbiAgICBpdChwcmludExvZyhcIid2YWx1ZScgd2l0aG91dCB3aGl0ZXNwYWNlIFwiLCAndHJpbScsIFwiJyB2YWx1ZSAnXCIpLCAoKSA9PiBleHBlY3QodXRpbHMudHJpbSgnIHZhbHVlICcpKS50b0VxdWFsKCd2YWx1ZScpKTtcbiAgfSk7XG59KTtcbiJdfQ==
