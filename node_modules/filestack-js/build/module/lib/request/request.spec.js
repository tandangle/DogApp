/*
 * Copyright (c) 2019 by Filestack.
 * Some rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { __awaiter, __generator } from "tslib";
import { FsRequest } from './request';
import { FsHttpMethod } from './types';
import { Dispatch } from './dispatch';
jest.mock('./dispatch');
var dispatchSpy = jest.fn(function () { return Promise.resolve('response'); });
// @ts-ignore
Dispatch.prototype.request.mockImplementation(dispatchSpy);
describe('Request/Request', function () {
    var url = 'https://filestack.com';
    describe('dispatch', function () {
        it('should return response', function () { return __awaiter(void 0, void 0, void 0, function () {
            var fsRequest, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        fsRequest = new FsRequest();
                        return [4 /*yield*/, fsRequest.dispatch({ method: FsHttpMethod.GET })];
                    case 1:
                        response = _a.sent();
                        expect(dispatchSpy).toHaveBeenCalledWith({ method: FsHttpMethod.GET });
                        expect(response).toBe('response');
                        return [2 /*return*/];
                }
            });
        }); });
    });
    describe('dispatch with url', function () {
        it('should return response', function () { return __awaiter(void 0, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, FsRequest.dispatch(url, { url: url })];
                    case 1:
                        response = _a.sent();
                        expect(dispatchSpy).toHaveBeenCalledWith({
                            method: FsHttpMethod.GET,
                            url: url,
                        });
                        expect(response).toBe('response');
                        return [2 /*return*/];
                }
            });
        }); });
    });
    describe('dispatch static method', function () {
        it('should return response', function () { return __awaiter(void 0, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, FsRequest.dispatch(url, { method: FsHttpMethod.GET })];
                    case 1:
                        response = _a.sent();
                        expect(dispatchSpy).toHaveBeenCalledWith({
                            method: FsHttpMethod.GET,
                            url: url,
                        });
                        expect(response).toBe('response');
                        return [2 /*return*/];
                }
            });
        }); });
    });
    describe('static get method', function () {
        it('should return response', function () { return __awaiter(void 0, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, FsRequest.get(url)];
                    case 1:
                        response = _a.sent();
                        expect(dispatchSpy).toHaveBeenCalledWith({
                            method: FsHttpMethod.GET,
                            url: url,
                        });
                        expect(response).toBe('response');
                        return [2 /*return*/];
                }
            });
        }); });
    });
    describe('static head method', function () {
        it('should return response', function () { return __awaiter(void 0, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, FsRequest.head(url)];
                    case 1:
                        response = _a.sent();
                        expect(dispatchSpy).toHaveBeenCalledWith({
                            method: FsHttpMethod.HEAD,
                            url: url,
                        });
                        expect(response).toBe('response');
                        return [2 /*return*/];
                }
            });
        }); });
    });
    describe('static options method', function () {
        it('should return response', function () { return __awaiter(void 0, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, FsRequest.options(url)];
                    case 1:
                        response = _a.sent();
                        expect(dispatchSpy).toHaveBeenCalledWith({
                            method: FsHttpMethod.OPTIONS,
                            url: url,
                        });
                        expect(response).toBe('response');
                        return [2 /*return*/];
                }
            });
        }); });
    });
    describe('static purge method', function () {
        it('should return response', function () { return __awaiter(void 0, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, FsRequest.purge(url)];
                    case 1:
                        response = _a.sent();
                        expect(dispatchSpy).toHaveBeenCalledWith({
                            method: FsHttpMethod.PURGE,
                            url: url,
                        });
                        expect(response).toBe('response');
                        return [2 /*return*/];
                }
            });
        }); });
    });
    describe('static delete method', function () {
        it('should return response', function () { return __awaiter(void 0, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, FsRequest.delete(url)];
                    case 1:
                        response = _a.sent();
                        expect(dispatchSpy).toHaveBeenCalledWith({
                            method: FsHttpMethod.DELETE,
                            url: url,
                        });
                        expect(response).toBe('response');
                        return [2 /*return*/];
                }
            });
        }); });
    });
    describe('static post method', function () {
        it('should return response', function () { return __awaiter(void 0, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, FsRequest.post(url)];
                    case 1:
                        response = _a.sent();
                        expect(dispatchSpy).toHaveBeenCalledWith({
                            method: FsHttpMethod.POST,
                            url: url,
                        });
                        expect(response).toBe('response');
                        return [2 /*return*/];
                }
            });
        }); });
    });
    describe('static put method', function () {
        it('should return response', function () { return __awaiter(void 0, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, FsRequest.put(url)];
                    case 1:
                        response = _a.sent();
                        expect(dispatchSpy).toHaveBeenCalledWith({
                            method: FsHttpMethod.PUT,
                            url: url,
                        });
                        expect(response).toBe('response');
                        return [2 /*return*/];
                }
            });
        }); });
    });
    describe('static path method', function () {
        it('should return response', function () { return __awaiter(void 0, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, FsRequest.path(url)];
                    case 1:
                        response = _a.sent();
                        expect(dispatchSpy).toHaveBeenCalledWith({
                            method: FsHttpMethod.PATH,
                            url: url,
                        });
                        expect(response).toBe('response');
                        return [2 /*return*/];
                }
            });
        }); });
    });
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,
