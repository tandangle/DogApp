// token
var token = function (data) { return new Promise(function (resolve) { return data.listeners.push(resolve); }); };
var tokenSource = function () {
    var data = {
        reason: null,
        listeners: [],
    };
    var cancel = function (reason) {
        reason = reason || 'Aborted';
        if (typeof reason === 'string') {
            reason = new Error(reason);
        }
        data.reason = reason;
        // Only for security reason
        /* istanbul ignore next */
        setTimeout(function () {
            for (var i = 0; i < data.listeners.length; i++) {
                if (typeof data.listeners[i] === 'function') {
                    data.listeners[i](reason);
                    data.listeners.splice(i, 1);
                }
            }
        }, 0);
    };
    return {
        cancel: cancel,
        token: token(data),
    };
};
/**
 * Filestack token that allow pause, resume or cancel given upload
 *
 * @export
 * @class FsToken
 * @extends {EventEmitter}
 * @implements {FsTokenInterface}
 */
var FsCancelToken = /** @class */ (function () {
    function FsCancelToken() {
        var cancelable = tokenSource();
        this.source = cancelable.token;
        this.cancelMethod = cancelable.cancel;
    }
    /**
     * Cancel request action
     *
     * @param {(string | Error)} [reason]
     * @memberof Token
     */
    FsCancelToken.prototype.cancel = function (reason) {
        this.cancelMethod(reason);
    };
    /**
     * Returns cancel token promise
     *
     * @returns
     * @memberof Token
     */
    FsCancelToken.prototype.getSource = function () {
        return this.source;
    };
    return FsCancelToken;
}());
export { FsCancelToken };

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9saWIvcmVxdWVzdC90b2tlbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFtQkEsUUFBUTtBQUNSLElBQU0sS0FBSyxHQUFHLFVBQUEsSUFBSSxJQUFJLE9BQUEsSUFBSSxPQUFPLENBQUMsVUFBQSxPQUFPLElBQUksT0FBQSxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsRUFBNUIsQ0FBNEIsQ0FBQyxFQUFwRCxDQUFvRCxDQUFDO0FBRTNFLElBQU0sV0FBVyxHQUFHO0lBQ2xCLElBQU0sSUFBSSxHQUFHO1FBQ1gsTUFBTSxFQUFFLElBQUk7UUFDWixTQUFTLEVBQUUsRUFBRTtLQUNkLENBQUM7SUFFRixJQUFNLE1BQU0sR0FBRyxVQUFBLE1BQU07UUFDbkIsTUFBTSxHQUFHLE1BQU0sSUFBSSxTQUFTLENBQUM7UUFFN0IsSUFBSSxPQUFPLE1BQU0sS0FBSyxRQUFRLEVBQUU7WUFDOUIsTUFBTSxHQUFHLElBQUksS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQzVCO1FBRUQsSUFBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUM7UUFFckIsMkJBQTJCO1FBQzNCLDBCQUEwQjtRQUMxQixVQUFVLENBQUM7WUFDVCxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7Z0JBQzlDLElBQUksT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxLQUFLLFVBQVUsRUFBRTtvQkFDM0MsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQztvQkFDMUIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO2lCQUM3QjthQUNGO1FBQ0gsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQ1IsQ0FBQyxDQUFDO0lBRUYsT0FBTztRQUNMLE1BQU0sRUFBRSxNQUFNO1FBQ2QsS0FBSyxFQUFFLEtBQUssQ0FBQyxJQUFJLENBQUM7S0FDbkIsQ0FBQztBQUNKLENBQUMsQ0FBQztBQUVGOzs7Ozs7O0dBT0c7QUFDSDtJQUlFO1FBQ0UsSUFBTSxVQUFVLEdBQUcsV0FBVyxFQUFFLENBQUM7UUFFakMsSUFBSSxDQUFDLE1BQU0sR0FBRyxVQUFVLENBQUMsS0FBSyxDQUFDO1FBQy9CLElBQUksQ0FBQyxZQUFZLEdBQUcsVUFBVSxDQUFDLE1BQU0sQ0FBQztJQUN4QyxDQUFDO0lBRUQ7Ozs7O09BS0c7SUFDSSw4QkFBTSxHQUFiLFVBQWMsTUFBdUI7UUFDbkMsSUFBSSxDQUFDLFlBQVksQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUM1QixDQUFDO0lBRUQ7Ozs7O09BS0c7SUFDSSxpQ0FBUyxHQUFoQjtRQUNFLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQztJQUNyQixDQUFDO0lBQ0gsb0JBQUM7QUFBRCxDQTlCQSxBQThCQyxJQUFBIiwiZmlsZSI6ImxpYi9yZXF1ZXN0L3Rva2VuLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIENvcHlyaWdodCAoYykgMjAxOCBieSBGaWxlc3RhY2tcbiAqIFNvbWUgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuaW1wb3J0IHsgRnNUb2tlbkludGVyZmFjZSB9IGZyb20gJy4vdHlwZXMnO1xuaW1wb3J0IHsgRXZlbnRFbWl0dGVyIH0gZnJvbSAnZXZlbnRlbWl0dGVyMyc7XG5cbi8vIHRva2VuXG5jb25zdCB0b2tlbiA9IGRhdGEgPT4gbmV3IFByb21pc2UocmVzb2x2ZSA9PiBkYXRhLmxpc3RlbmVycy5wdXNoKHJlc29sdmUpKTtcblxuY29uc3QgdG9rZW5Tb3VyY2UgPSAoKSA9PiB7XG4gIGNvbnN0IGRhdGEgPSB7XG4gICAgcmVhc29uOiBudWxsLFxuICAgIGxpc3RlbmVyczogW10sXG4gIH07XG5cbiAgY29uc3QgY2FuY2VsID0gcmVhc29uID0+IHtcbiAgICByZWFzb24gPSByZWFzb24gfHwgJ0Fib3J0ZWQnO1xuXG4gICAgaWYgKHR5cGVvZiByZWFzb24gPT09ICdzdHJpbmcnKSB7XG4gICAgICByZWFzb24gPSBuZXcgRXJyb3IocmVhc29uKTtcbiAgICB9XG5cbiAgICBkYXRhLnJlYXNvbiA9IHJlYXNvbjtcblxuICAgIC8vIE9ubHkgZm9yIHNlY3VyaXR5IHJlYXNvblxuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZGF0YS5saXN0ZW5lcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKHR5cGVvZiBkYXRhLmxpc3RlbmVyc1tpXSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIGRhdGEubGlzdGVuZXJzW2ldKHJlYXNvbik7XG4gICAgICAgICAgZGF0YS5saXN0ZW5lcnMuc3BsaWNlKGksIDEpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSwgMCk7XG4gIH07XG5cbiAgcmV0dXJuIHtcbiAgICBjYW5jZWw6IGNhbmNlbCxcbiAgICB0b2tlbjogdG9rZW4oZGF0YSksXG4gIH07XG59O1xuXG4vKipcbiAqIEZpbGVzdGFjayB0b2tlbiB0aGF0IGFsbG93IHBhdXNlLCByZXN1bWUgb3IgY2FuY2VsIGdpdmVuIHVwbG9hZFxuICpcbiAqIEBleHBvcnRcbiAqIEBjbGFzcyBGc1Rva2VuXG4gKiBAZXh0ZW5kcyB7RXZlbnRFbWl0dGVyfVxuICogQGltcGxlbWVudHMge0ZzVG9rZW5JbnRlcmZhY2V9XG4gKi9cbmV4cG9ydCBjbGFzcyBGc0NhbmNlbFRva2VuIGltcGxlbWVudHMgRnNUb2tlbkludGVyZmFjZSB7XG4gIHByaXZhdGUgc291cmNlOiBhbnk7XG4gIHByaXZhdGUgY2FuY2VsTWV0aG9kOiBhbnk7XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgY29uc3QgY2FuY2VsYWJsZSA9IHRva2VuU291cmNlKCk7XG5cbiAgICB0aGlzLnNvdXJjZSA9IGNhbmNlbGFibGUudG9rZW47XG4gICAgdGhpcy5jYW5jZWxNZXRob2QgPSBjYW5jZWxhYmxlLmNhbmNlbDtcbiAgfVxuXG4gIC8qKlxuICAgKiBDYW5jZWwgcmVxdWVzdCBhY3Rpb25cbiAgICpcbiAgICogQHBhcmFtIHsoc3RyaW5nIHwgRXJyb3IpfSBbcmVhc29uXVxuICAgKiBAbWVtYmVyb2YgVG9rZW5cbiAgICovXG4gIHB1YmxpYyBjYW5jZWwocmVhc29uPzogc3RyaW5nIHwgRXJyb3IpIHtcbiAgICB0aGlzLmNhbmNlbE1ldGhvZChyZWFzb24pO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgY2FuY2VsIHRva2VuIHByb21pc2VcbiAgICpcbiAgICogQHJldHVybnNcbiAgICogQG1lbWJlcm9mIFRva2VuXG4gICAqL1xuICBwdWJsaWMgZ2V0U291cmNlKCk6IFByb21pc2U8c3RyaW5nPiB7XG4gICAgcmV0dXJuIHRoaXMuc291cmNlO1xuICB9XG59XG4iXX0=
