export declare const TransformSchema: {
    '$schema': string;
    title: string;
    description: string;
    type: string;
    additionalProperties: boolean;
    properties: {
        flip: {
            type: string;
            additionalProperties: boolean;
        };
        auto_image: {
            type: string;
            additionalProperties: boolean;
        };
        no_metadata: {
            type: string;
            additionalProperties: boolean;
        };
        compress: {
            additionalProperties: boolean;
            oneOf: ({
                type: string;
                properties?: undefined;
            } | {
                type: string;
                properties: {
                    metadata: {
                        type: string;
                        default: boolean;
                    };
                };
            })[];
        };
        flop: {
            type: string;
            additionalProperties: boolean;
        };
        enhance: {
            default: boolean;
            oneOf: ({
                type: string;
                additionalProperties?: undefined;
                properties?: undefined;
            } | {
                type: string;
                additionalProperties: boolean;
                properties: {
                    preset: {
                        type: string;
                        enum: string[];
                    };
                };
            })[];
        };
        redeye: {
            type: string;
            additionalProperties: boolean;
        };
        monochrome: {
            type: string;
            additionalProperties: boolean;
        };
        negative: {
            type: string;
            additionalProperties: boolean;
        };
        tags: {
            type: string;
            additionalProperties: boolean;
        };
        sfw: {
            type: string;
            additionalProperties: boolean;
        };
        imagesize: {
            type: string;
            additionalProperties: boolean;
        };
        animate: {
            type: string;
            properties: {
                delay: {
                    type: string;
                    minimum: number;
                    maximum: number;
                    default: number;
                };
                loop: {
                    type: string;
                    minimum: number;
                    maximum: number;
                    default: number;
                };
                width: {
                    type: string;
                    minimum: number;
                    maximum: number;
                };
                height: {
                    type: string;
                    minimum: number;
                    maximum: number;
                };
                fit: {
                    type: string;
                    default: string;
                    enum: string[];
                };
                background: {
                    '$ref': string;
                    default: string;
                };
                align: {
                    '$ref': string;
                    default: string;
                };
            };
        };
        metadata: {
            type: string;
            params: {
                type: string;
                items: {
                    type: string;
                    enum: string[];
                };
                minItems: number;
                uniqueItems: boolean;
                additionalItems: boolean;
            };
            additionalProperties: boolean;
        };
        resize: {
            type: string;
            properties: {
                width: {
                    type: string;
                    minimum: number;
                    maximum: number;
                };
                height: {
                    type: string;
                    minimum: number;
                    maximum: number;
                };
                fit: {
                    type: string;
                    enum: string[];
                    default: string;
                };
                align: {
                    '$ref': string;
                    default: string;
                };
            };
            additionalProperties: boolean;
            anyOf: {
                required: string[];
            }[];
        };
        crop: {
            type: string;
            properties: {
                dim: {
                    type: string;
                    additionalItems: boolean;
                    minItems: number;
                    items: {
                        type: string;
                        minimum: number;
                        maximum: number;
                    }[];
                };
            };
            required: string[];
        };
        rotate: {
            type: string;
            properties: {
                deg: {
                    oneOf: ({
                        type: string;
                        enum: string[];
                        minimum?: undefined;
                        maximum?: undefined;
                    } | {
                        type: string;
                        minimum: number;
                        maximum: number;
                        enum?: undefined;
                    })[];
                };
                exif: {
                    type: string;
                };
                background: {
                    '$ref': string;
                    default: string;
                };
            };
            additionalProperties: boolean;
        };
        detect_faces: {
            oneOf: ({
                type: string;
                properties?: undefined;
                additionalProperties?: undefined;
            } | {
                type: string;
                properties: {
                    maxsize: {
                        type: string;
                        minimum: number;
                        maximum: number;
                        default: number;
                    };
                    minsize: {
                        type: string;
                        minimum: number;
                        maximum: number;
                        default: number;
                    };
                    export: {
                        type: string;
                    };
                    color: {
                        '$ref': string;
                        default: string;
                    };
                };
                additionalProperties: boolean;
            })[];
        };
        crop_faces: {
            oneOf: ({
                type: string;
                properties?: undefined;
                additionalProperties?: undefined;
            } | {
                type: string;
                properties: {
                    faces: {
                        default: number;
                        '$ref': string;
                    };
                    width: {
                        type: string;
                        minimum: number;
                        maximum: number;
                    };
                    height: {
                        type: string;
                        minimum: number;
                        maximum: number;
                    };
                    maxsize: {
                        type: string;
                        minimum: number;
                        maximum: number;
                        default: number;
                    };
                    minsize: {
                        type: string;
                        minimum: number;
                        maximum: number;
                        default: number;
                    };
                    buffer: {
                        type: string;
                        minimum: number;
                        maximum: number;
                    };
                    mode: {
                        type: string;
                        enum: string[];
                        default: string;
                    };
                };
                additionalProperties: boolean;
            })[];
        };
        pixelate_faces: {
            oneOf: ({
                type: string;
                properties?: undefined;
                additionalProperties?: undefined;
            } | {
                type: string;
                properties: {
                    faces: {
                        '$ref': string;
                        default: string;
                    };
                    maxsize: {
                        type: string;
                        minimum: number;
                        maximum: number;
                        default: number;
                    };
                    minsize: {
                        type: string;
                        minimum: number;
                        maximum: number;
                        default: number;
                    };
                    buffer: {
                        type: string;
                        minimum: number;
                        maximum: number;
                    };
                    amount: {
                        type: string;
                        minimum: number;
                        maximum: number;
                        default: number;
                    };
                    blur: {
                        type: string;
                        minimum: number;
                        maximum: number;
                        default: number;
                    };
                    type: {
                        type: string;
                        enum: string[];
                        default: string;
                    };
                };
                additionalProperties: boolean;
            })[];
        };
        blur_faces: {
            oneOf: ({
                type: string;
                properties?: undefined;
                additionalProperties?: undefined;
            } | {
                type: string;
                properties: {
                    faces: {
                        '$ref': string;
                        default: string;
                    };
                    maxsize: {
                        type: string;
                        minimum: number;
                        maximum: number;
                        default: number;
                    };
                    minsize: {
                        type: string;
                        minimum: number;
                        maximum: number;
                        default: number;
                    };
                    buffer: {
                        type: string;
                        minimum: number;
                        maximum: number;
                    };
                    amount: {
                        type: string;
                        minimum: number;
                        maximum: number;
                        default: number;
                    };
                    blur: {
                        type: string;
                        minimum: number;
                        maximum: number;
                        default: number;
                    };
                    type: {
                        type: string;
                        enum: string[];
                        default: string;
                    };
                };
                additionalProperties: boolean;
            })[];
        };
        rounded_corners: {
            oneOf: ({
                type: string;
                properties?: undefined;
                additionalProperties?: undefined;
            } | {
                type: string;
                properties: {
                    radius: {
                        oneOf: ({
                            type: string;
                            minimum: number;
                            maximum: number;
                            enum?: undefined;
                        } | {
                            type: string;
                            enum: string[];
                            minimum?: undefined;
                            maximum?: undefined;
                        })[];
                    };
                    blur: {
                        type: string;
                        minimum: number;
                        maximum: number;
                        default: number;
                    };
                    background: {
                        '$ref': string;
                    };
                };
                additionalProperties: boolean;
            })[];
        };
        vignette: {
            oneOf: ({
                type: string;
                properties?: undefined;
                additionalProperties?: undefined;
            } | {
                type: string;
                properties: {
                    amount: {
                        type: string;
                        minimum: number;
                        maximum: number;
                        default: number;
                    };
                    blurmode: {
                        type: string;
                        enum: string[];
                        default: string;
                    };
                    background: {
                        '$ref': string;
                    };
                };
                additionalProperties: boolean;
            })[];
        };
        polaroid: {
            oneOf: ({
                type: string;
                properties?: undefined;
                additionalProperties?: undefined;
            } | {
                type: string;
                properties: {
                    rotate: {
                        type: string;
                        minimum: number;
                        maximum: number;
                    };
                    color: {
                        '$ref': string;
                        default: string;
                    };
                    background: {
                        '$ref': string;
                    };
                };
                additionalProperties: boolean;
            })[];
        };
        torn_edges: {
            oneOf: ({
                type: string;
                properties?: undefined;
                additionalProperties?: undefined;
            } | {
                type: string;
                properties: {
                    spread: {
                        type: string;
                        additionalItems: boolean;
                        minItems: number;
                        items: {
                            type: string;
                            minimum: number;
                            maximum: number;
                            default: number;
                        }[];
                    };
                    background: {
                        '$ref': string;
                    };
                };
                additionalProperties: boolean;
            })[];
        };
        shadow: {
            oneOf: ({
                type: string;
                properties?: undefined;
                additionalProperties?: undefined;
            } | {
                type: string;
                properties: {
                    blur: {
                        type: string;
                        minimum: number;
                        maximum: number;
                        default: number;
                    };
                    opacity: {
                        type: string;
                        minimum: number;
                        maximum: number;
                        default: number;
                    };
                    vector: {
                        type: string;
                        additionalItems: boolean;
                        minItems: number;
                        items: {
                            type: string;
                            minimum: number;
                            maximum: number;
                            default: number;
                        }[];
                    };
                    color: {
                        '$ref': string;
                    };
                    background: {
                        '$ref': string;
                    };
                };
                additionalProperties: boolean;
            })[];
        };
        circle: {
            oneOf: ({
                type: string;
                properties?: undefined;
                additionalProperties?: undefined;
            } | {
                type: string;
                properties: {
                    background: {
                        '$ref': string;
                    };
                };
                additionalProperties: boolean;
            })[];
        };
        border: {
            oneOf: ({
                type: string;
                properties?: undefined;
                additionalProperties?: undefined;
            } | {
                type: string;
                properties: {
                    color: {
                        '$ref': string;
                    };
                    background: {
                        '$ref': string;
                    };
                    width: {
                        type: string;
                        minimum: number;
                        maximum: number;
                    };
                };
                additionalProperties: boolean;
            })[];
        };
        sharpen: {
            oneOf: ({
                type: string;
                properties?: undefined;
                additionalProperties?: undefined;
            } | {
                type: string;
                properties: {
                    amount: {
                        type: string;
                        minimum: number;
                        maximum: number;
                        default: number;
                    };
                };
                additionalProperties: boolean;
            })[];
        };
        blur: {
            oneOf: ({
                type: string;
                properties?: undefined;
                additionalProperties?: undefined;
            } | {
                type: string;
                properties: {
                    amount: {
                        type: string;
                        minimum: number;
                        maximum: number;
                        default: number;
                    };
                };
                additionalProperties: boolean;
            })[];
        };
        blackwhite: {
            oneOf: ({
                type: string;
                properties?: undefined;
                additionalProperties?: undefined;
            } | {
                type: string;
                properties: {
                    threshold: {
                        type: string;
                        minimum: number;
                        maximum: number;
                        default: number;
                    };
                };
                additionalProperties: boolean;
            })[];
        };
        sepia: {
            oneOf: ({
                type: string;
                properties?: undefined;
                additionalProperties?: undefined;
            } | {
                type: string;
                properties: {
                    tone: {
                        type: string;
                        minimum: number;
                        maximum: number;
                        default: number;
                    };
                };
                additionalProperties: boolean;
            })[];
        };
        pixelate: {
            oneOf: ({
                type: string;
                properties?: undefined;
                additionalProperties?: undefined;
            } | {
                type: string;
                properties: {
                    amount: {
                        type: string;
                        minimum: number;
                        maximum: number;
                        default: number;
                    };
                };
                additionalProperties: boolean;
            })[];
        };
        oil_paint: {
            oneOf: ({
                type: string;
                properties?: undefined;
                additionalProperties?: undefined;
            } | {
                type: string;
                properties: {
                    amount: {
                        type: string;
                        minimum: number;
                        maximum: number;
                        default: number;
                    };
                };
                additionalProperties: boolean;
            })[];
        };
        modulate: {
            oneOf: ({
                type: string;
                properties?: undefined;
                additionalProperties?: undefined;
            } | {
                type: string;
                properties: {
                    brightness: {
                        type: string;
                        minimum: number;
                        maximum: number;
                        default: number;
                    };
                    saturation: {
                        type: string;
                        minimum: number;
                        maximum: number;
                        default: number;
                    };
                    hue: {
                        type: string;
                        minimum: number;
                        maximum: number;
                        default: number;
                    };
                };
                additionalProperties: boolean;
            })[];
        };
        ascii: {
            oneOf: ({
                type: string;
                properties?: undefined;
                additionalProperties?: undefined;
            } | {
                type: string;
                properties: {
                    foreground: {
                        '$ref': string;
                        default: string;
                    };
                    background: {
                        '$ref': string;
                        default: string;
                    };
                    colored: {
                        type: string;
                        default: boolean;
                    };
                    size: {
                        type: string;
                        minimum: number;
                        maximum: number;
                        default: number;
                    };
                    reverse: {
                        type: string;
                        default: boolean;
                    };
                };
                additionalProperties: boolean;
            })[];
        };
        collage: {
            type: string;
            properties: {
                files: {
                    type: string;
                    minItems: number;
                    items: {
                        type: string;
                    }[];
                };
                margin: {
                    type: string;
                    minimum: number;
                    maximum: number;
                    default: number;
                };
                width: {
                    type: string;
                    minimum: number;
                    maximum: number;
                };
                height: {
                    type: string;
                    minimum: number;
                    maximum: number;
                };
                color: {
                    '$ref': string;
                    default: string;
                };
                fit: {
                    type: string;
                    enum: string[];
                };
                autorotate: {
                    type: string;
                    default: boolean;
                };
            };
            required: string[];
            additionalProperties: boolean;
        };
        urlscreenshot: {
            oneOf: ({
                type: string;
                properties?: undefined;
                additionalProperties?: undefined;
            } | {
                type: string;
                properties: {
                    agent: {
                        type: string;
                        enum: string[];
                        default: string;
                    };
                    width: {
                        type: string;
                        minimum: number;
                        maximum: number;
                        default: number;
                    };
                    height: {
                        type: string;
                        minimum: number;
                        maximum: number;
                        default: number;
                    };
                    mode: {
                        type: string;
                        enum: string[];
                        default: string;
                    };
                    delay: {
                        type: string;
                        minimum: number;
                        maximum: number;
                        default: number;
                    };
                    orientation: {
                        type: string;
                        enum: string[];
                        default: string;
                    };
                    device: {
                        type: string;
                        default: string;
                    };
                };
                additionalProperties: boolean;
            })[];
        };
        upscale: {
            oneOf: ({
                type: string;
                properties?: undefined;
                additionalProperties?: undefined;
            } | {
                type: string;
                properties: {
                    noise: {
                        type: string;
                        enum: string[];
                        default: string;
                    };
                    upscale: {
                        type: string;
                        default: boolean;
                    };
                    style: {
                        type: string;
                        enum: string[];
                        default: string;
                    };
                };
                additionalProperties: boolean;
            })[];
        };
        output: {
            type: string;
            additionalProperties: boolean;
            properties: {
                format: {
                    type: string;
                    enum: string[];
                };
                page: {
                    type: string;
                    minimum: number;
                    maximum: number;
                };
                density: {
                    type: string;
                    minimum: number;
                    maximum: number;
                };
                compress: {
                    type: string;
                };
                quality: {
                    oneOf: ({
                        type: string;
                        enum: string[];
                        minimum?: undefined;
                        maximum?: undefined;
                        default?: undefined;
                    } | {
                        type: string;
                        minimum: number;
                        maximum: number;
                        default: number;
                        enum?: undefined;
                    })[];
                };
                secure: {
                    type: string;
                    default: boolean;
                };
                docinfo: {
                    type: string;
                    default: boolean;
                };
                strip: {
                    type: string;
                    default: boolean;
                };
                colorspace: {
                    type: string;
                    enum: string[];
                    default: string;
                };
                background: {
                    '$ref': string;
                };
                pageformat: {
                    type: string;
                    enum: string[];
                };
                pageorientation: {
                    type: string;
                    enum: string[];
                };
            };
        };
        pjpg: {
            oneOf: ({
                type: string;
                additionalProperties?: undefined;
                properties?: undefined;
            } | {
                type: string;
                additionalProperties: boolean;
                properties: {
                    quality: {
                        type: string;
                        minimum: number;
                        maximum: number;
                    };
                    metadata: {
                        type: string;
                        default: boolean;
                    };
                };
            })[];
        };
        quality: {
            type: string;
            additionalProperties: boolean;
            properties: {
                value: {
                    type: string;
                    minimum: number;
                    maximum: number;
                };
            };
        };
        cache: {
            oneOf: ({
                type: string;
                properties?: undefined;
            } | {
                type: string;
                properties: {
                    expiry: {
                        type: string;
                    };
                };
            })[];
        };
        video_convert: {
            type: string;
            additionalProperties: boolean;
            properties: {
                width: {
                    type: string;
                    minimum: number;
                    maximum: number;
                };
                height: {
                    type: string;
                    minimum: number;
                    maximum: number;
                };
                preset: {
                    type: string;
                };
                force: {
                    type: string;
                };
                title: {
                    type: string;
                };
                extname: {
                    type: string;
                };
                upscale: {
                    type: string;
                };
                aspect_mode: {
                    type: string;
                    enum: string[];
                    default: string;
                };
                audio_sample_rate: {
                    type: string;
                    minimum: number;
                    maximum: number;
                };
                two_pass: {
                    type: string;
                };
                video_bitrate: {
                    type: string;
                    minimum: number;
                    maximum: number;
                };
                fps: {
                    type: string;
                    minimum: number;
                    maximum: number;
                };
                keyframe_interval: {
                    type: string;
                    minimum: number;
                    maximum: number;
                };
                audio_bitrate: {
                    type: string;
                    minimum: number;
                    maximum: number;
                };
                audio_channels: {
                    type: string;
                    minimum: number;
                    maximum: number;
                };
                clip_length: {
                    type: string;
                    pattern: string;
                };
                clip_offset: {
                    type: string;
                    pattern: string;
                };
                watermark_url: {
                    type: string;
                };
                watermark_top: {
                    type: string;
                    minimum: number;
                    maximum: number;
                };
                watermark_right: {
                    type: string;
                    minimum: number;
                    maximum: number;
                };
                watermark_bottom: {
                    type: string;
                    minimum: number;
                    maximum: number;
                };
                watermark_left: {
                    type: string;
                    minimum: number;
                    maximum: number;
                };
                frame_count: {
                    type: string;
                    minimum: number;
                    maximum: number;
                    default: number;
                };
                filename: {
                    type: string;
                };
                location: {
                    '$ref': string;
                };
                path: {
                    type: string;
                };
                container: {
                    type: string;
                };
                access: {
                    type: string;
                    enum: string[];
                    default: string;
                };
            };
        };
        store: {
            oneOf: ({
                type: string;
                additionalProperties?: undefined;
                properties?: undefined;
            } | {
                type: string;
                additionalProperties: boolean;
                properties: {
                    filename: {
                        type: string;
                    };
                    location: {
                        '$ref': string;
                    };
                    path: {
                        type: string;
                    };
                    container: {
                        type: string;
                    };
                    region: {
                        '$ref': string;
                    };
                    access: {
                        type: string;
                        enum: string[];
                        default: string;
                    };
                    base64decode: {
                        type: string;
                    };
                    workflows: {
                        '$ref': string;
                    };
                };
            })[];
        };
        watermark: {
            type: string;
            properties: {
                file: {
                    type: string;
                };
                size: {
                    type: string;
                    minimum: number;
                    maximum: number;
                };
                position: {
                    '$ref': string;
                };
            };
            required: string[];
            additionalProperties: boolean;
        };
        partial_blur: {
            type: string;
            properties: {
                objects: {
                    '$ref': string;
                };
                amount: {
                    type: string;
                    minimum: number;
                    maximum: number;
                };
                blur: {
                    type: string;
                    minimum: number;
                    maximum: number;
                };
                type: {
                    type: string;
                    enum: string[];
                };
            };
            required: string[];
        };
        partial_pixelate: {
            type: string;
            properties: {
                objects: {
                    '$ref': string;
                };
                amount: {
                    type: string;
                    minimum: number;
                    maximum: number;
                };
                blur: {
                    type: string;
                    minimum: number;
                    maximum: number;
                };
                type: {
                    type: string;
                    enum: string[];
                };
            };
            required: string[];
        };
        security: {
            type: string;
            additionalProperties: boolean;
            properties: {
                policy: {
                    type: string;
                };
                signature: {
                    type: string;
                };
            };
            required: string[];
        };
        pdfinfo: {
            oneOf: ({
                type: string;
                properties?: undefined;
            } | {
                type: string;
                properties: {
                    colorinfo: {
                        type: string;
                    };
                };
            })[];
        };
        pdfconvert: {
            type: string;
            additionalProperties: boolean;
            properties: {
                pageorientation: {
                    type: string;
                    enum: string[];
                };
                pageformat: {
                    '$ref': string;
                };
                pages: {
                    '$ref': string;
                };
            };
            anyOf: {
                required: string[];
            }[];
        };
        fallback: {
            type: string;
            additionalProperties: boolean;
            properties: {
                handle: {
                    type: string;
                };
                cache: {
                    type: string;
                    minimum: number;
                    maximum: number;
                };
            };
            required: string[];
        };
        zip: {
            type: string;
        };
        minify_css: {
            type: string;
            additionalProperties: boolean;
            properties: {
                gzip: {
                    type: string;
                };
                level: {
                    type: string;
                    enum: number[];
                };
            };
        };
        minify_js: {
            type: string;
            additionalProperties: boolean;
            properties: {
                gzip: {
                    type: string;
                };
                use_babel_polyfill: {
                    type: string;
                };
                keep_fn_name: {
                    type: string;
                };
                keep_class_name: {
                    type: string;
                };
                mangle: {
                    type: string;
                };
                merge_vars: {
                    type: string;
                };
                remove_console: {
                    type: string;
                };
                remove_undefined: {
                    type: string;
                };
                targets: {
                    type: string;
                };
            };
        };
    };
};
