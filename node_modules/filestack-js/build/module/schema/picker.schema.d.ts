export declare const PickerParamsSchema: {
    $schema: string;
    title: string;
    description: string;
    type: string;
    additionalProperties: boolean;
    properties: {
        allowManualRetry: {
            type: string;
        };
        accept: {
            additionalProperties: boolean;
            oneOf: ({
                type: string;
                minItems?: undefined;
                items?: undefined;
            } | {
                type: string;
                minItems: number;
                items: {
                    type: string;
                }[];
            })[];
        };
        fromSources: {
            type: string;
            items: {
                type: string;
                additionalProperties: boolean;
                enum: string[];
            }[];
        };
        tags: {
            type: string;
            additionalProperties: {
                type: string;
            };
        };
        container: {
            format: string;
        };
        cleanupImageExif: {
            oneOf: ({
                type: string;
                additionalProperties?: undefined;
                properties?: undefined;
            } | {
                type: string;
                additionalProperties: boolean;
                properties: {
                    keepOrientation: {
                        type: string;
                    };
                    keepICCandAPP: {
                        type: string;
                    };
                };
            })[];
        };
        displayMode: {
            type: string;
            enum: string[];
        };
        concurrency: {
            type: string;
            minimum: number;
            maximum: number;
        };
        supportEmail: {
            type: string;
        };
        customSourceContainer: {
            type: string;
        };
        customSourcePath: {
            type: string;
        };
        customSourceName: {
            type: string;
        };
        disableStorageKey: {
            type: string;
        };
        disableTransformer: {
            type: string;
        };
        disableThumbnails: {
            type: string;
        };
        exposeOriginalFile: {
            type: string;
        };
        globalDropZone: {
            type: string;
        };
        hideModalWhenUploading: {
            type: string;
        };
        imageDim: {
            type: string;
            minItems: number;
            maxItems: number;
            items: {
                type: string;
                minimum: number;
            }[];
        };
        imageMax: {
            type: string;
            minItems: number;
            maxItems: number;
            items: {
                type: string;
                minimum: number;
            }[];
        };
        imageMin: {
            type: string;
            minItems: number;
            maxItems: number;
            items: {
                type: string;
                minimum: number;
            }[];
        };
        imageMinMaxBlock: {
            type: string;
            default: boolean;
        };
        lang: {
            type: string;
            enum: string[];
        };
        minFiles: {
            type: string;
            minimum: number;
            maximum: number;
        };
        maxFiles: {
            type: string;
            minimum: number;
            maximum: number;
        };
        maxSize: {
            type: string;
            minimum: number;
        };
        modalSize: {
            type: string;
            minItems: number;
            maxItems: number;
            items: {
                type: string;
                minimum: number;
                maximum: number;
            }[];
        };
        rootId: {
            type: string;
        };
        startUploadingWhenMaxFilesReached: {
            type: string;
        };
        uploadInBackground: {
            type: string;
        };
        videoResolution: {
            type: string;
        };
        onCancel: {
            format: string;
        };
        onClose: {
            format: string;
        };
        onOpen: {
            format: string;
        };
        onFileSelected: {
            format: string;
        };
        onFileUploadStarted: {
            format: string;
        };
        onFileUploadFinished: {
            format: string;
        };
        onFileUploadFailed: {
            format: string;
        };
        onFileUploadProgress: {
            format: string;
        };
        onUploadStarted: {
            format: string;
        };
        onUploadDone: {
            format: string;
        };
        storeTo: {
            additionalProperties: boolean;
            type: string;
            properties: {
                filename: {
                    type: string;
                };
                location: {
                    $ref: string;
                };
                container: {
                    type: string;
                };
                path: {
                    type: string;
                };
                region: {
                    type: string;
                };
                access: {
                    type: string;
                    enum: string[];
                };
                workflows: {
                    $ref: string;
                };
            };
        };
        viewType: {
            type: string;
            enum: string[];
        };
        transformations: {
            type: string;
            additionalProperties: boolean;
            properties: {
                circle: {
                    type: string;
                };
                rotate: {
                    type: string;
                };
                force: {
                    type: string;
                };
                crop: {
                    oneOf: ({
                        type: string;
                        additionalProperties?: undefined;
                        properties?: undefined;
                    } | {
                        type: string;
                        additionalProperties: boolean;
                        properties: {
                            force: {
                                type: string;
                            };
                            aspectRatio: {
                                type: string;
                            };
                        };
                    })[];
                };
            };
        };
        customText: {
            type: string;
            patternProperties: {
                '.*': {
                    type: string;
                };
            };
        };
        dropPane: {
            type: string;
            properties: {
                cropFiles: {
                    type: string;
                };
                customText: {
                    type: string;
                };
                disableClick: {
                    type: string;
                };
                overlay: {
                    type: string;
                };
                showIcon: {
                    type: string;
                };
                showProgress: {
                    type: string;
                };
                onDragEnter: {
                    format: string;
                };
                onProgress: {
                    format: string;
                };
                onDragLeave: {
                    format: string;
                };
                onDragOver: {
                    format: string;
                };
                onDrop: {
                    format: string;
                };
                onSuccess: {
                    format: string;
                };
                onError: {
                    format: string;
                };
                onClick: {
                    format: string;
                };
            };
        };
        errorsTimeout: {
            type: string;
            minimum: number;
        };
        customAuthText: {
            type: string;
            patternProperties: {
                '.*': {
                    additionalProperties: boolean;
                    type: string;
                    required: string[];
                    properties: {
                        top: {
                            type: string;
                        };
                        bottom: {
                            type: string;
                        };
                    };
                };
            };
        };
        uploadConfig: {
            type: string;
            additionalProperties: boolean;
            properties: {
                partSize: {
                    type: string;
                    minimum: number;
                };
                concurrency: {
                    type: string;
                    minimum: number;
                    maximum: number;
                };
                progressInterval: {
                    type: string;
                    minimum: number;
                };
                retry: {
                    type: string;
                    minimum: number;
                    maximum: number;
                };
                retryFactor: {
                    type: string;
                };
                retryMaxTime: {
                    type: string;
                };
                timeout: {
                    type: string;
                    minimum: number;
                    maximum: number;
                };
                intelligent: {
                    oneOf: ({
                        type: string;
                        enum?: undefined;
                    } | {
                        type: string;
                        enum: string[];
                    })[];
                };
                intelligentChunkSize: {
                    type: string;
                };
                onProgress: {
                    format: string;
                };
                onRetry: {
                    format: string;
                };
                disableIntegrityCheck: {
                    type: string;
                };
                tags: {
                    type: string;
                    maxItems: number;
                    additionalProperties: {
                        type: string;
                        maxlength: number;
                    };
                };
            };
        };
        useSentryBreadcrumbs: {
            type: string;
        };
    };
};
