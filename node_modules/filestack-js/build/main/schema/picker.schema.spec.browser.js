"use strict";
/*
 * Copyright (c) 2018 by Filestack.
 * Some rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var assert = require("assert");
var _1 = require("./");
var jsdom = require("jsdom");
var JSDOM = jsdom.JSDOM;
describe('Picker Params Schema', function () {
    var validator = _1.getValidator(_1.PickerParamsSchema);
    var validate = function (params) {
        var res = validator(params);
        // if (res.errors.length) {
        //   console.log(res.errors);
        // }
        return res.errors.length === 0 ? true : false;
    };
    var assertFail = function (res) { return assert.ok(!res); };
    it('should validate allow manual retry', function () {
        assert.ok(validate({ allowManualRetry: true }));
        assertFail(validate({ allowManualRetry: {} }));
    });
    it('should validate accept param', function () {
        assert.ok(validate({ accept: 'image/jpeg' }));
        assert.ok(validate({ accept: ['image/jpeg', 'image/png', '*'] }));
        assertFail(validate({ accept: {} }));
    });
    it('should validate fromSources param', function () {
        assert.ok(validate({ fromSources: ['url', 'facebook'] }));
        assertFail(validate({ fromSources: ['wrong_source'] }));
    });
    it('should validate container param', function () {
        assert.ok(validate({ container: 'test' }));
        var nodeDiv = JSDOM.fragment("<div>Hello</div>").querySelector('div');
        var nodeP = JSDOM.fragment("<p>Hello</p>").querySelector('p');
        assert.ok(validate({ container: nodeDiv }));
        assert.ok(validate({ container: nodeP }));
        assertFail(validate({ container: {} }));
    });
    it('should validate cleanupImageExif param', function () {
        assert.ok(validate({ cleanupImageExif: true }));
        assert.ok(validate({
            cleanupImageExif: {
                keepOrientation: true,
            },
        }));
        assertFail(validate({
            cleanupImageExif: {
                test: 1,
            },
        }));
    });
    it('should validate displayMode param', function () {
        assert.ok(validate({ displayMode: 'inline' }));
        assert.ok(validate({ displayMode: 'overlay' }));
        assert.ok(validate({ displayMode: 'dropPane' }));
        assertFail(validate({ displayMode: 'test' }));
    });
    it('should validate imageDim param', function () {
        assert.ok(validate({ imageDim: [100, 100] }));
        assertFail(validate({ imageDim: [0, 1] }));
        assertFail(validate({ imageDim: [100, 100, 3] }));
    });
    it('should validate storeTo Params', function () {
        assert.ok(validate({
            storeTo: {
                filename: 'test',
                location: 's3',
                path: '/test/',
                region: 'test',
                access: 'public',
                workflows: ['test'],
            },
        }));
        assert.ok(validate({
            storeTo: {
                filename: 'test',
                location: 's3',
                path: '/test/',
                region: 'test',
                access: 'private',
                workflows: [
                    {
                        id: 'test',
                    },
                ],
            },
        }));
        assertFail(validate({
            storeTo: {
                workflows: {},
                access: 'none',
            },
        }));
    });
    it('should validate transformations param', function () {
        assert.ok(validate({
            transformations: {
                circle: true,
                rotate: true,
                crop: true,
            },
        }));
        assert.ok(validate({
            transformations: {
                circle: false,
                rotate: false,
                crop: {
                    force: true,
                    aspectRatio: 1 / 2,
                },
            },
        }));
        assertFail(validate({
            transformations: {
                test: 123,
            },
        }));
    });
    it('should validate customText param', function () {
        assert.ok(validate({
            customText: {
                sometest: 'testtext',
            },
        }));
        assertFail(validate({ customText: ['test', 'ts1'] }));
    });
    it('should validate customAuthText param', function () {
        assert.ok(validate({
            customAuthText: {
                test: {
                    top: 'test',
                    bottom: 'test2',
                },
            },
        }));
        assertFail(validate({
            customAuthText: {
                test: {
                    top: 'test',
                },
            },
        }));
        assertFail(validate({
            customAuthText: {
                test: '123',
            },
        }));
    });
    it('should validate ', function () {
        assert.ok(validate({
            uploadConfig: {
                partSize: 5 * 1024 * 1024,
                intelligent: true,
                onProgress: function () { return console; },
            },
        }));
        assert.ok(validate({
            uploadConfig: {
                intelligent: 'fallback',
            },
        }));
        assertFail(validate({
            uploadConfig: {
                partSize: 100,
            },
        }));
        assertFail(validate({
            uploadConfig: {
                progressInterval: 0,
            },
        }));
        assertFail(validate({
            uploadConfig: {
                concurrency: 0,
            },
        }));
    });
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY2hlbWEvcGlja2VyLnNjaGVtYS5zcGVjLmJyb3dzZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOzs7Ozs7Ozs7Ozs7Ozs7R0FlRzs7QUFFSCwrQkFBaUM7QUFDakMsdUJBQXNEO0FBRXRELDZCQUErQjtBQUN2QixJQUFBLG1CQUFLLENBQVc7QUFFeEIsUUFBUSxDQUFDLHNCQUFzQixFQUFFO0lBQy9CLElBQU0sU0FBUyxHQUFHLGVBQVksQ0FBQyxxQkFBa0IsQ0FBQyxDQUFDO0lBRW5ELElBQU0sUUFBUSxHQUFHLFVBQUEsTUFBTTtRQUNyQixJQUFNLEdBQUcsR0FBRyxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUM7UUFFOUIsMkJBQTJCO1FBQzNCLDZCQUE2QjtRQUM3QixJQUFJO1FBRUosT0FBTyxHQUFHLENBQUMsTUFBTSxDQUFDLE1BQU0sS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDO0lBQ2hELENBQUMsQ0FBQztJQUVGLElBQU0sVUFBVSxHQUFHLFVBQUEsR0FBRyxJQUFJLE9BQUEsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFmLENBQWUsQ0FBQztJQUUxQyxFQUFFLENBQUMsb0NBQW9DLEVBQUU7UUFDdkMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxRQUFRLENBQUMsRUFBRSxnQkFBZ0IsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDaEQsVUFBVSxDQUFDLFFBQVEsQ0FBQyxFQUFFLGdCQUFnQixFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUNqRCxDQUFDLENBQUMsQ0FBQztJQUVILEVBQUUsQ0FBQyw4QkFBOEIsRUFBRTtRQUNqQyxNQUFNLENBQUMsRUFBRSxDQUFDLFFBQVEsQ0FBQyxFQUFFLE1BQU0sRUFBRSxZQUFZLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDOUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxRQUFRLENB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Q0FDUCxRQUFRLENBQUM7WUFDUCxZQUFZLEVBQUU7Z0JBQ1osUUFBUSxFQUFFLENBQUMsR0FBRyxJQUFJLEdBQUcsSUFBSTtnQkFDekIsV0FBVyxFQUFFLElBQUk7Z0JBQ2pCLFVBQVUsRUFBRSxjQUFNLE9BQUEsT0FBTyxFQUFQLENBQU87YUFDMUI7U0FDRixDQUFDLENBQ0gsQ0FBQztRQUVGLE1BQU0sQ0FBQyxFQUFFLENBQ1AsUUFBUSxDQUFDO1lBQ1AsWUFBWSxFQUFFO2dCQUNaLFdBQVcsRUFBRSxVQUFVO2FBQ3hCO1NBQ0YsQ0FBQyxDQUNILENBQUM7UUFFRixVQUFVLENBQ1IsUUFBUSxDQUFDO1lBQ1AsWUFBWSxFQUFFO2dCQUNaLFFBQVEsRUFBRSxHQUFHO2FBQ2Q7U0FDRixDQUFDLENBQ0gsQ0FBQztRQUVGLFVBQVUsQ0FDUixRQUFRLENBQUM7WUFDUCxZQUFZLEVBQUU7Z0JBQ1osZ0JBQWdCLEVBQUUsQ0FBQzthQUNwQjtTQUNGLENBQUMsQ0FDSCxDQUFDO1FBRUYsVUFBVSxDQUNSLFFBQVEsQ0FBQztZQUNQLFlBQVksRUFBRTtnQkFDWixXQUFXLEVBQUUsQ0FBQzthQUNmO1NBQ0YsQ0FBQyxDQUNILENBQUM7SUFDSixDQUFDLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQyxDQUFDIiwiZmlsZSI6InNjaGVtYS9waWNrZXIuc2NoZW1hLnNwZWMuYnJvd3Nlci5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTggYnkgRmlsZXN0YWNrLlxuICogU29tZSByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCAqIGFzIGFzc2VydCBmcm9tICdhc3NlcnQnO1xuaW1wb3J0IHsgZ2V0VmFsaWRhdG9yLCBQaWNrZXJQYXJhbXNTY2hlbWEgfSBmcm9tICcuLyc7XG5cbmltcG9ydCAqIGFzIGpzZG9tIGZyb20gJ2pzZG9tJztcbmNvbnN0IHsgSlNET00gfSA9IGpzZG9tO1xuXG5kZXNjcmliZSgnUGlja2VyIFBhcmFtcyBTY2hlbWEnLCAoKSA9PiB7XG4gIGNvbnN0IHZhbGlkYXRvciA9IGdldFZhbGlkYXRvcihQaWNrZXJQYXJhbXNTY2hlbWEpO1xuXG4gIGNvbnN0IHZhbGlkYXRlID0gcGFyYW1zID0+IHtcbiAgICBjb25zdCByZXMgPSB2YWxpZGF0b3IocGFyYW1zKTtcblxuICAgIC8vIGlmIChyZXMuZXJyb3JzLmxlbmd0aCkge1xuICAgIC8vICAgY29uc29sZS5sb2cocmVzLmVycm9ycyk7XG4gICAgLy8gfVxuXG4gICAgcmV0dXJuIHJlcy5lcnJvcnMubGVuZ3RoID09PSAwID8gdHJ1ZSA6IGZhbHNlO1xuICB9O1xuXG4gIGNvbnN0IGFzc2VydEZhaWwgPSByZXMgPT4gYXNzZXJ0Lm9rKCFyZXMpO1xuXG4gIGl0KCdzaG91bGQgdmFsaWRhdGUgYWxsb3cgbWFudWFsIHJldHJ5JywgKCkgPT4ge1xuICAgIGFzc2VydC5vayh2YWxpZGF0ZSh7IGFsbG93TWFudWFsUmV0cnk6IHRydWUgfSkpO1xuICAgIGFzc2VydEZhaWwodmFsaWRhdGUoeyBhbGxvd01hbnVhbFJldHJ5OiB7fSB9KSk7XG4gIH0pO1xuXG4gIGl0KCdzaG91bGQgdmFsaWRhdGUgYWNjZXB0IHBhcmFtJywgKCkgPT4ge1xuICAgIGFzc2VydC5vayh2YWxpZGF0ZSh7IGFjY2VwdDogJ2ltYWdlL2pwZWcnIH0pKTtcbiAgICBhc3NlcnQub2sodmFsaWRhdGUoeyBhY2NlcHQ6IFsnaW1hZ2UvanBlZycsICdpbWFnZS9wbmcnLCAnKiddIH0pKTtcbiAgICBhc3NlcnRGYWlsKHZhbGlkYXRlKHsgYWNjZXB0OiB7fSB9KSk7XG4gIH0pO1xuXG4gIGl0KCdzaG91bGQgdmFsaWRhdGUgZnJvbVNvdXJjZXMgcGFyYW0nLCAoKSA9PiB7XG4gICAgYXNzZXJ0Lm9rKHZhbGlkYXRlKHsgZnJvbVNvdXJjZXM6IFsndXJsJywgJ2ZhY2Vib29rJ10gfSkpO1xuICAgIGFzc2VydEZhaWwodmFsaWRhdGUoeyBmcm9tU291cmNlczogWyd3cm9uZ19zb3VyY2UnXSB9KSk7XG4gIH0pO1xuXG4gIGl0KCdzaG91bGQgdmFsaWRhdGUgY29udGFpbmVyIHBhcmFtJywgKCkgPT4ge1xuICAgIGFzc2VydC5vayh2YWxpZGF0ZSh7IGNvbnRhaW5lcjogJ3Rlc3QnIH0pKTtcblxuICAgIGNvbnN0IG5vZGVEaXYgPSBKU0RPTS5mcmFnbWVudChgPGRpdj5IZWxsbzwvZGl2PmApLnF1ZXJ5U2VsZWN0b3IoJ2RpdicpO1xuICAgIGNvbnN0IG5vZGVQID0gSlNET00uZnJhZ21lbnQoYDxwPkhlbGxvPC9wPmApLnF1ZXJ5U2VsZWN0b3IoJ3AnKTtcbiAgICBhc3NlcnQub2sodmFsaWRhdGUoeyBjb250YWluZXI6IG5vZGVEaXYgfSkpO1xuICAgIGFzc2VydC5vayh2YWxpZGF0ZSh7IGNvbnRhaW5lcjogbm9kZVAgfSkpO1xuICAgIGFzc2VydEZhaWwodmFsaWRhdGUoeyBjb250YWluZXI6IHt9IH0pKTtcbiAgfSk7XG5cbiAgaXQoJ3Nob3VsZCB2YWxpZGF0ZSBjbGVhbnVwSW1hZ2VFeGlmIHBhcmFtJywgKCkgPT4ge1xuICAgIGFzc2VydC5vayh2YWxpZGF0ZSh7IGNsZWFudXBJbWFnZUV4aWY6IHRydWUgfSkpO1xuICAgIGFzc2VydC5vayhcbiAgICAgIHZhbGlkYXRlKHtcbiAgICAgICAgY2xlYW51cEltYWdlRXhpZjoge1xuICAgICAgICAgIGtlZXBPcmllbnRhdGlvbjogdHJ1ZSxcbiAgICAgICAgfSxcbiAgICAgIH0pXG4gICAgKTtcbiAgICBhc3NlcnRGYWlsKFxuICAgICAgdmFsaWRhdGUoe1xuICAgICAgICBjbGVhbnVwSW1hZ2VFeGlmOiB7XG4gICAgICAgICAgdGVzdDogMSxcbiAgICAgICAgfSxcbiAgICAgIH0pXG4gICAgKTtcbiAgfSk7XG5cbiAgaXQoJ3Nob3VsZCB2YWxpZGF0ZSBkaXNwbGF5TW9kZSBwYXJhbScsICgpID0+IHtcbiAgICBhc3NlcnQub2sodmFsaWRhdGUoeyBkaXNwbGF5TW9kZTogJ2lubGluZScgfSkpO1xuICAgIGFzc2VydC5vayh2YWxpZGF0ZSh7IGRpc3BsYXlNb2RlOiAnb3ZlcmxheScgfSkpO1xuICAgIGFzc2VydC5vayh2YWxpZGF0ZSh7IGRpc3BsYXlNb2RlOiAnZHJvcFBhbmUnIH0pKTtcbiAgICBhc3NlcnRGYWlsKHZhbGlkYXRlKHsgZGlzcGxheU1vZGU6ICd0ZXN0JyB9KSk7XG4gIH0pO1xuXG4gIGl0KCdzaG91bGQgdmFsaWRhdGUgaW1hZ2VEaW0gcGFyYW0nLCAoKSA9PiB7XG4gICAgYXNzZXJ0Lm9rKHZhbGlkYXRlKHsgaW1hZ2VEaW06IFsxMDAsIDEwMF0gfSkpO1xuICAgIGFzc2VydEZhaWwodmFsaWRhdGUoeyBpbWFnZURpbTogWzAsIDFdIH0pKTtcbiAgICBhc3NlcnRGYWlsKHZhbGlkYXRlKHsgaW1hZ2VEaW06IFsxMDAsIDEwMCwgM10gfSkpO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIHZhbGlkYXRlIHN0b3JlVG8gUGFyYW1zJywgKCkgPT4ge1xuICAgIGFzc2VydC5vayhcbiAgICAgIHZhbGlkYXRlKHtcbiAgICAgICAgc3RvcmVUbzoge1xuICAgICAgICAgIGZpbGVuYW1lOiAndGVzdCcsXG4gICAgICAgICAgbG9jYXRpb246ICdzMycsXG4gICAgICAgICAgcGF0aDogJy90ZXN0LycsXG4gICAgICAgICAgcmVnaW9uOiAndGVzdCcsXG4gICAgICAgICAgYWNjZXNzOiAncHVibGljJyxcbiAgICAgICAgICB3b3JrZmxvd3M6IFsndGVzdCddLFxuICAgICAgICB9LFxuICAgICAgfSlcbiAgICApO1xuXG4gICAgYXNzZXJ0Lm9rKFxuICAgICAgdmFsaWRhdGUoe1xuICAgICAgICBzdG9yZVRvOiB7XG4gICAgICAgICAgZmlsZW5hbWU6ICd0ZXN0JyxcbiAgICAgICAgICBsb2NhdGlvbjogJ3MzJyxcbiAgICAgICAgICBwYXRoOiAnL3Rlc3QvJyxcbiAgICAgICAgICByZWdpb246ICd0ZXN0JyxcbiAgICAgICAgICBhY2Nlc3M6ICdwcml2YXRlJyxcbiAgICAgICAgICB3b3JrZmxvd3M6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgaWQ6ICd0ZXN0JyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgXSxcbiAgICAgICAgfSxcbiAgICAgIH0pXG4gICAgKTtcblxuICAgIGFzc2VydEZhaWwoXG4gICAgICB2YWxpZGF0ZSh7XG4gICAgICAgIHN0b3JlVG86IHtcbiAgICAgICAgICB3b3JrZmxvd3M6IHt9LFxuICAgICAgICAgIGFjY2VzczogJ25vbmUnLFxuICAgICAgICB9LFxuICAgICAgfSlcbiAgICApO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIHZhbGlkYXRlIHRyYW5zZm9ybWF0aW9ucyBwYXJhbScsICgpID0+IHtcbiAgICBhc3NlcnQub2soXG4gICAgICB2YWxpZGF0ZSh7XG4gICAgICAgIHRyYW5zZm9ybWF0aW9uczoge1xuICAgICAgICAgIGNpcmNsZTogdHJ1ZSxcbiAgICAgICAgICByb3RhdGU6IHRydWUsXG4gICAgICAgICAgY3JvcDogdHJ1ZSxcbiAgICAgICAgfSxcbiAgICAgIH0pXG4gICAgKTtcblxuICAgIGFzc2VydC5vayhcbiAgICAgIHZhbGlkYXRlKHtcbiAgICAgICAgdHJhbnNmb3JtYXRpb25zOiB7XG4gICAgICAgICAgY2lyY2xlOiBmYWxzZSxcbiAgICAgICAgICByb3RhdGU6IGZhbHNlLFxuICAgICAgICAgIGNyb3A6IHtcbiAgICAgICAgICAgIGZvcmNlOiB0cnVlLFxuICAgICAgICAgICAgYXNwZWN0UmF0aW86IDEgLyAyLFxuICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgICB9KVxuICAgICk7XG5cbiAgICBhc3NlcnRGYWlsKFxuICAgICAgdmFsaWRhdGUoe1xuICAgICAgICB0cmFuc2Zvcm1hdGlvbnM6IHtcbiAgICAgICAgICB0ZXN0OiAxMjMsXG4gICAgICAgIH0sXG4gICAgICB9KVxuICAgICk7XG4gIH0pO1xuXG4gIGl0KCdzaG91bGQgdmFsaWRhdGUgY3VzdG9tVGV4dCBwYXJhbScsICgpID0+IHtcbiAgICBhc3NlcnQub2soXG4gICAgICB2YWxpZGF0ZSh7XG4gICAgICAgIGN1c3RvbVRleHQ6IHtcbiAgICAgICAgICBzb21ldGVzdDogJ3Rlc3R0ZXh0JyxcbiAgICAgICAgfSxcbiAgICAgIH0pXG4gICAgKTtcbiAgICBhc3NlcnRGYWlsKHZhbGlkYXRlKHsgY3VzdG9tVGV4dDogWyd0ZXN0JywgJ3RzMSddIH0pKTtcbiAgfSk7XG5cbiAgaXQoJ3Nob3VsZCB2YWxpZGF0ZSBjdXN0b21BdXRoVGV4dCBwYXJhbScsICgpID0+IHtcbiAgICBhc3NlcnQub2soXG4gICAgICB2YWxpZGF0ZSh7XG4gICAgICAgIGN1c3RvbUF1dGhUZXh0OiB7XG4gICAgICAgICAgdGVzdDoge1xuICAgICAgICAgICAgdG9wOiAndGVzdCcsXG4gICAgICAgICAgICBib3R0b206ICd0ZXN0MicsXG4gICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICAgIH0pXG4gICAgKTtcblxuICAgIGFzc2VydEZhaWwoXG4gICAgICB2YWxpZGF0ZSh7XG4gICAgICAgIGN1c3RvbUF1dGhUZXh0OiB7XG4gICAgICAgICAgdGVzdDoge1xuICAgICAgICAgICAgdG9wOiAndGVzdCcsXG4gICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICAgIH0pXG4gICAgKTtcblxuICAgIGFzc2VydEZhaWwoXG4gICAgICB2YWxpZGF0ZSh7XG4gICAgICAgIGN1c3RvbUF1dGhUZXh0OiB7XG4gICAgICAgICAgdGVzdDogJzEyMycsXG4gICAgICAgIH0sXG4gICAgICB9KVxuICAgICk7XG4gIH0pO1xuXG4gIGl0KCdzaG91bGQgdmFsaWRhdGUgJywgKCkgPT4ge1xuICAgIGFzc2VydC5vayhcbiAgICAgIHZhbGlkYXRlKHtcbiAgICAgICAgdXBsb2FkQ29uZmlnOiB7XG4gICAgICAgICAgcGFydFNpemU6IDUgKiAxMDI0ICogMTAyNCxcbiAgICAgICAgICBpbnRlbGxpZ2VudDogdHJ1ZSxcbiAgICAgICAgICBvblByb2dyZXNzOiAoKSA9PiBjb25zb2xlLFxuICAgICAgICB9LFxuICAgICAgfSlcbiAgICApO1xuXG4gICAgYXNzZXJ0Lm9rKFxuICAgICAgdmFsaWRhdGUoe1xuICAgICAgICB1cGxvYWRDb25maWc6IHtcbiAgICAgICAgICBpbnRlbGxpZ2VudDogJ2ZhbGxiYWNrJyxcbiAgICAgICAgfSxcbiAgICAgIH0pXG4gICAgKTtcblxuICAgIGFzc2VydEZhaWwoXG4gICAgICB2YWxpZGF0ZSh7XG4gICAgICAgIHVwbG9hZENvbmZpZzoge1xuICAgICAgICAgIHBhcnRTaXplOiAxMDAsXG4gICAgICAgIH0sXG4gICAgICB9KVxuICAgICk7XG5cbiAgICBhc3NlcnRGYWlsKFxuICAgICAgdmFsaWRhdGUoe1xuICAgICAgICB1cGxvYWRDb25maWc6IHtcbiAgICAgICAgICBwcm9ncmVzc0ludGVydmFsOiAwLFxuICAgICAgICB9LFxuICAgICAgfSlcbiAgICApO1xuXG4gICAgYXNzZXJ0RmFpbChcbiAgICAgIHZhbGlkYXRlKHtcbiAgICAgICAgdXBsb2FkQ29uZmlnOiB7XG4gICAgICAgICAgY29uY3VycmVuY3k6IDAsXG4gICAgICAgIH0sXG4gICAgICB9KVxuICAgICk7XG4gIH0pO1xufSk7XG4iXX0=
