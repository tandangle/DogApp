"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// token
var token = function (data) { return new Promise(function (resolve) { return data.listeners.push(resolve); }); };
var tokenSource = function () {
    var data = {
        reason: null,
        listeners: [],
    };
    var cancel = function (reason) {
        reason = reason || 'Aborted';
        if (typeof reason === 'string') {
            reason = new Error(reason);
        }
        data.reason = reason;
        // Only for security reason
        /* istanbul ignore next */
        setTimeout(function () {
            for (var i = 0; i < data.listeners.length; i++) {
                if (typeof data.listeners[i] === 'function') {
                    data.listeners[i](reason);
                    data.listeners.splice(i, 1);
                }
            }
        }, 0);
    };
    return {
        cancel: cancel,
        token: token(data),
    };
};
/**
 * Filestack token that allow pause, resume or cancel given upload
 *
 * @export
 * @class FsToken
 * @extends {EventEmitter}
 * @implements {FsTokenInterface}
 */
var FsCancelToken = /** @class */ (function () {
    function FsCancelToken() {
        var cancelable = tokenSource();
        this.source = cancelable.token;
        this.cancelMethod = cancelable.cancel;
    }
    /**
     * Cancel request action
     *
     * @param {(string | Error)} [reason]
     * @memberof Token
     */
    FsCancelToken.prototype.cancel = function (reason) {
        this.cancelMethod(reason);
    };
    /**
     * Returns cancel token promise
     *
     * @returns
     * @memberof Token
     */
    FsCancelToken.prototype.getSource = function () {
        return this.source;
    };
    return FsCancelToken;
}());
exports.FsCancelToken = FsCancelToken;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9saWIvcmVxdWVzdC90b2tlbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQW1CQSxRQUFRO0FBQ1IsSUFBTSxLQUFLLEdBQUcsVUFBQSxJQUFJLElBQUksT0FBQSxJQUFJLE9BQU8sQ0FBQyxVQUFBLE9BQU8sSUFBSSxPQUFBLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUE1QixDQUE0QixDQUFDLEVBQXBELENBQW9ELENBQUM7QUFFM0UsSUFBTSxXQUFXLEdBQUc7SUFDbEIsSUFBTSxJQUFJLEdBQUc7UUFDWCxNQUFNLEVBQUUsSUFBSTtRQUNaLFNBQVMsRUFBRSxFQUFFO0tBQ2QsQ0FBQztJQUVGLElBQU0sTUFBTSxHQUFHLFVBQUEsTUFBTTtRQUNuQixNQUFNLEdBQUcsTUFBTSxJQUFJLFNBQVMsQ0FBQztRQUU3QixJQUFJLE9BQU8sTUFBTSxLQUFLLFFBQVEsRUFBRTtZQUM5QixNQUFNLEdBQUcsSUFBSSxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDNUI7UUFFRCxJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztRQUVyQiwyQkFBMkI7UUFDM0IsMEJBQTBCO1FBQzFCLFVBQVUsQ0FBQztZQUNULEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtnQkFDOUMsSUFBSSxPQUFPLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLEtBQUssVUFBVSxFQUFFO29CQUMzQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDO29CQUMxQixJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7aUJBQzdCO2FBQ0Y7UUFDSCxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDUixDQUFDLENBQUM7SUFFRixPQUFPO1FBQ0wsTUFBTSxFQUFFLE1BQU07UUFDZCxLQUFLLEVBQUUsS0FBSyxDQUFDLElBQUksQ0FBQztLQUNuQixDQUFDO0FBQ0osQ0FBQyxDQUFDO0FBRUY7Ozs7Ozs7R0FPRztBQUNIO0lBSUU7UUFDRSxJQUFNLFVBQVUsR0FBRyxXQUFXLEVBQUUsQ0FBQztRQUVqQyxJQUFJLENBQUMsTUFBTSxHQUFHLFVBQVUsQ0FBQyxLQUFLLENBQUM7UUFDL0IsSUFBSSxDQUFDLFlBQVksR0FBRyxVQUFVLENBQUMsTUFBTSxDQUFDO0lBQ3hDLENBQUM7SUFFRDs7Ozs7T0FLRztJQUNJLDhCQUFNLEdBQWIsVUFBYyxNQUF1QjtRQUNuQyxJQUFJLENBQUMsWUFBWSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQzVCLENBQUM7SUFFRDs7Ozs7T0FLRztJQUNJLGlDQUFTLEdBQWhCO1FBQ0UsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDO0lBQ3JCLENBQUM7SUFDSCxvQkFBQztBQUFELENBOUJBLEFBOEJDLElBQUE7QUE5Qlksc0NBQWEiLCJmaWxlIjoibGliL3JlcXVlc3QvdG9rZW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogQ29weXJpZ2h0IChjKSAyMDE4IGJ5IEZpbGVzdGFja1xuICogU29tZSByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5pbXBvcnQgeyBGc1Rva2VuSW50ZXJmYWNlIH0gZnJvbSAnLi90eXBlcyc7XG5pbXBvcnQgeyBFdmVudEVtaXR0ZXIgfSBmcm9tICdldmVudGVtaXR0ZXIzJztcblxuLy8gdG9rZW5cbmNvbnN0IHRva2VuID0gZGF0YSA9PiBuZXcgUHJvbWlzZShyZXNvbHZlID0+IGRhdGEubGlzdGVuZXJzLnB1c2gocmVzb2x2ZSkpO1xuXG5jb25zdCB0b2tlblNvdXJjZSA9ICgpID0+IHtcbiAgY29uc3QgZGF0YSA9IHtcbiAgICByZWFzb246IG51bGwsXG4gICAgbGlzdGVuZXJzOiBbXSxcbiAgfTtcblxuICBjb25zdCBjYW5jZWwgPSByZWFzb24gPT4ge1xuICAgIHJlYXNvbiA9IHJlYXNvbiB8fCAnQWJvcnRlZCc7XG5cbiAgICBpZiAodHlwZW9mIHJlYXNvbiA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHJlYXNvbiA9IG5ldyBFcnJvcihyZWFzb24pO1xuICAgIH1cblxuICAgIGRhdGEucmVhc29uID0gcmVhc29uO1xuXG4gICAgLy8gT25seSBmb3Igc2VjdXJpdHkgcmVhc29uXG4gICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBkYXRhLmxpc3RlbmVycy5sZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAodHlwZW9mIGRhdGEubGlzdGVuZXJzW2ldID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgZGF0YS5saXN0ZW5lcnNbaV0ocmVhc29uKTtcbiAgICAgICAgICBkYXRhLmxpc3RlbmVycy5zcGxpY2UoaSwgMSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LCAwKTtcbiAgfTtcblxuICByZXR1cm4ge1xuICAgIGNhbmNlbDogY2FuY2VsLFxuICAgIHRva2VuOiB0b2tlbihkYXRhKSxcbiAgfTtcbn07XG5cbi8qKlxuICogRmlsZXN0YWNrIHRva2VuIHRoYXQgYWxsb3cgcGF1c2UsIHJlc3VtZSBvciBjYW5jZWwgZ2l2ZW4gdXBsb2FkXG4gKlxuICogQGV4cG9ydFxuICogQGNsYXNzIEZzVG9rZW5cbiAqIEBleHRlbmRzIHtFdmVudEVtaXR0ZXJ9XG4gKiBAaW1wbGVtZW50cyB7RnNUb2tlbkludGVyZmFjZX1cbiAqL1xuZXhwb3J0IGNsYXNzIEZzQ2FuY2VsVG9rZW4gaW1wbGVtZW50cyBGc1Rva2VuSW50ZXJmYWNlIHtcbiAgcHJpdmF0ZSBzb3VyY2U6IGFueTtcbiAgcHJpdmF0ZSBjYW5jZWxNZXRob2Q6IGFueTtcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBjb25zdCBjYW5jZWxhYmxlID0gdG9rZW5Tb3VyY2UoKTtcblxuICAgIHRoaXMuc291cmNlID0gY2FuY2VsYWJsZS50b2tlbjtcbiAgICB0aGlzLmNhbmNlbE1ldGhvZCA9IGNhbmNlbGFibGUuY2FuY2VsO1xuICB9XG5cbiAgLyoqXG4gICAqIENhbmNlbCByZXF1ZXN0IGFjdGlvblxuICAgKlxuICAgKiBAcGFyYW0geyhzdHJpbmcgfCBFcnJvcil9IFtyZWFzb25dXG4gICAqIEBtZW1iZXJvZiBUb2tlblxuICAgKi9cbiAgcHVibGljIGNhbmNlbChyZWFzb24/OiBzdHJpbmcgfCBFcnJvcikge1xuICAgIHRoaXMuY2FuY2VsTWV0aG9kKHJlYXNvbik7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBjYW5jZWwgdG9rZW4gcHJvbWlzZVxuICAgKlxuICAgKiBAcmV0dXJuc1xuICAgKiBAbWVtYmVyb2YgVG9rZW5cbiAgICovXG4gIHB1YmxpYyBnZXRTb3VyY2UoKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgICByZXR1cm4gdGhpcy5zb3VyY2U7XG4gIH1cbn1cbiJdfQ==
