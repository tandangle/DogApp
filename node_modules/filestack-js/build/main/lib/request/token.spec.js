"use strict";
/*
 * Copyright (c) 2019 by Filestack.
 * Some rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var token_1 = require("./token");
describe('Request/Token', function () {
    describe('cancel', function () {
        var token = new token_1.FsCancelToken();
        it('cancel token should return undefined without value', function () { return expect(token.cancel()).toEqual(undefined); });
    });
    describe('cancel', function () {
        var token = new token_1.FsCancelToken();
        // @ts-ignore
        it("cancel token should return undefined with value new String('Aborted')", function () { return expect(token.cancel(new String('Aborted'))).toEqual(undefined); });
    });
    describe('source token', function () {
        it('source token should return called', function (done) {
            var token = new token_1.FsCancelToken();
            var source = token.getSource();
            var cancelSpy = jest.fn().mockName('cancelSpy');
            var cancelSpyCatch = jest.fn().mockName('cancelSpyCatch');
            source.then(cancelSpy).catch(cancelSpyCatch);
            token.cancel();
            setTimeout(function () {
                expect(cancelSpy).toHaveBeenCalled();
                done();
            }, 10);
        });
    });
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9saWIvcmVxdWVzdC90b2tlbi5zcGVjLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7Ozs7Ozs7Ozs7Ozs7O0dBZUc7O0FBRUgsaUNBQXdDO0FBRXhDLFFBQVEsQ0FBQyxlQUFlLEVBQUU7SUFDeEIsUUFBUSxDQUFDLFFBQVEsRUFBRTtRQUNqQixJQUFNLEtBQUssR0FBRyxJQUFJLHFCQUFhLEVBQUUsQ0FBQztRQUNsQyxFQUFFLENBQUMsb0RBQW9ELEVBQUUsY0FBTSxPQUFBLE1BQU0sQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLEVBQXpDLENBQXlDLENBQUMsQ0FBQztJQUM1RyxDQUFDLENBQUMsQ0FBQztJQUVILFFBQVEsQ0FBQyxRQUFRLEVBQUU7UUFDakIsSUFBTSxLQUFLLEdBQUcsSUFBSSxxQkFBYSxFQUFFLENBQUM7UUFDbEMsYUFBYTtRQUNiLEVBQUUsQ0FBQyx1RUFBdUUsRUFBRSxjQUFNLE9BQUEsTUFBTSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsSUFBSSxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsRUFBOUQsQ0FBOEQsQ0FBQyxDQUFDO0lBQ3BKLENBQUMsQ0FBQyxDQUFDO0lBRUgsUUFBUSxDQUFDLGNBQWMsRUFBRTtRQUN2QixFQUFFLENBQUMsbUNBQW1DLEVBQUUsVUFBQSxJQUFJO1lBQzFDLElBQU0sS0FBSyxHQUFHLElBQUkscUJBQWEsRUFBRSxDQUFDO1lBQ2xDLElBQU0sTUFBTSxHQUFHLEtBQUssQ0FBQyxTQUFTLEVBQUUsQ0FBQztZQUNqQyxJQUFNLFNBQVMsR0FBRyxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQyxDQUFDO1lBQ2xELElBQU0sY0FBYyxHQUFHLElBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQyxRQUFRLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztZQUU1RCxNQUFNLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxjQUFjLENBQUMsQ0FBQztZQUU3QyxLQUFLLENBQUMsTUFBTSxFQUFFLENBQUM7WUFFZixVQUFVLENBQUM7Z0JBQ1QsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFDLGdCQUFnQixFQUFFLENBQUM7Z0JBQ3JDLElBQUksRUFBRSxDQUFDO1lBQ1QsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQ1QsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQyxDQUFDIiwiZmlsZSI6ImxpYi9yZXF1ZXN0L3Rva2VuLnNwZWMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogQ29weXJpZ2h0IChjKSAyMDE5IGJ5IEZpbGVzdGFjay5cbiAqIFNvbWUgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBGc0NhbmNlbFRva2VuIH0gZnJvbSAnLi90b2tlbic7XG5cbmRlc2NyaWJlKCdSZXF1ZXN0L1Rva2VuJywgKCkgPT4ge1xuICBkZXNjcmliZSgnY2FuY2VsJywgKCkgPT4ge1xuICAgIGNvbnN0IHRva2VuID0gbmV3IEZzQ2FuY2VsVG9rZW4oKTtcbiAgICBpdCgnY2FuY2VsIHRva2VuIHNob3VsZCByZXR1cm4gdW5kZWZpbmVkIHdpdGhvdXQgdmFsdWUnLCAoKSA9PiBleHBlY3QodG9rZW4uY2FuY2VsKCkpLnRvRXF1YWwodW5kZWZpbmVkKSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdjYW5jZWwnLCAoKSA9PiB7XG4gICAgY29uc3QgdG9rZW4gPSBuZXcgRnNDYW5jZWxUb2tlbigpO1xuICAgIC8vIEB0cy1pZ25vcmVcbiAgICBpdChcImNhbmNlbCB0b2tlbiBzaG91bGQgcmV0dXJuIHVuZGVmaW5lZCB3aXRoIHZhbHVlIG5ldyBTdHJpbmcoJ0Fib3J0ZWQnKVwiLCAoKSA9PiBleHBlY3QodG9rZW4uY2FuY2VsKG5ldyBTdHJpbmcoJ0Fib3J0ZWQnKSkpLnRvRXF1YWwodW5kZWZpbmVkKSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdzb3VyY2UgdG9rZW4nLCAoKSA9PiB7XG4gICAgaXQoJ3NvdXJjZSB0b2tlbiBzaG91bGQgcmV0dXJuIGNhbGxlZCcsIGRvbmUgPT4ge1xuICAgICAgY29uc3QgdG9rZW4gPSBuZXcgRnNDYW5jZWxUb2tlbigpO1xuICAgICAgY29uc3Qgc291cmNlID0gdG9rZW4uZ2V0U291cmNlKCk7XG4gICAgICBjb25zdCBjYW5jZWxTcHkgPSBqZXN0LmZuKCkubW9ja05hbWUoJ2NhbmNlbFNweScpO1xuICAgICAgY29uc3QgY2FuY2VsU3B5Q2F0Y2ggPSBqZXN0LmZuKCkubW9ja05hbWUoJ2NhbmNlbFNweUNhdGNoJyk7XG5cbiAgICAgIHNvdXJjZS50aGVuKGNhbmNlbFNweSkuY2F0Y2goY2FuY2VsU3B5Q2F0Y2gpO1xuXG4gICAgICB0b2tlbi5jYW5jZWwoKTtcblxuICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgIGV4cGVjdChjYW5jZWxTcHkpLnRvSGF2ZUJlZW5DYWxsZWQoKTtcbiAgICAgICAgZG9uZSgpO1xuICAgICAgfSwgMTApO1xuICAgIH0pO1xuICB9KTtcbn0pO1xuIl19
