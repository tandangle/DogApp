"use strict";
/*
 * Copyright (c) 2018 by Filestack
 * Some rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var data_1 = require("./data");
describe('Request/Helpers/Data', function () {
    describe('prepare data', function () {
        it('should return empty data', function () {
            var data = { url: 'https://filestack.com', data: {} };
            expect(data_1.prepareData(data)).toEqual(data);
        });
        it('should return ArrayBuffer', function () {
            var data = { url: 'https://filestack.com', data: new ArrayBuffer(10) };
            expect(data_1.prepareData(data)).toEqual(data);
        });
        it('should return url params', function () {
            var data = { url: 'https://filestack.com', data: new URLSearchParams('q=search&id=1') };
            expect(data_1.prepareData(data)).toEqual(data);
        });
    });
    describe('parse response', function () {
        it('should return equal response data', function () { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
            var response, _a;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        response = {
                            status: 200,
                            statusText: 'ok',
                            headers: {},
                            data: [],
                            config: {
                                url: 'https://filestack.com',
                            },
                        };
                        _a = expect;
                        return [4 /*yield*/, data_1.parseResponse(response)];
                    case 1:
                        _a.apply(void 0, [_b.sent()]).toEqual(response);
                        return [2 /*return*/];
                }
            });
        }); });
        it('should return response with application/json and data stringify', function () { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
            var response, _a;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        response = {
                            status: 200,
                            statusText: 'ok',
                            headers: {
                                'content-type': 'application/json',
                            },
                            data: JSON.stringify({ a: 1 }),
                            config: {
                                url: 'https://filestack.com',
                            },
                        };
                        _a = expect;
                        return [4 /*yield*/, data_1.parseResponse(response)];
                    case 1:
                        _a.apply(void 0, [_b.sent()]).toEqual(response);
                        return [2 /*return*/];
                }
            });
        }); });
        it('should return response with application/json and json data ', function () { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
            var response, _a;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        response = {
                            status: 200,
                            statusText: 'ok',
                            headers: {
                                'content-type': 'application/json',
                            },
                            data: { a: 1 },
                            config: {
                                url: 'https://filestack.com',
                            },
                        };
                        _a = expect;
                        return [4 /*yield*/, data_1.parseResponse(response)];
                    case 1:
                        _a.apply(void 0, [_b.sent()]).toEqual(response);
                        return [2 /*return*/];
                }
            });
        }); });
        it('should return text/plain response with ArrayBuffer ', function () { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
            var response, _a;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        response = {
                            status: 200,
                            statusText: 'ok',
                            headers: {
                                'content-type': 'text/plain',
                            },
                            data: new ArrayBuffer(10),
                            config: {
                                url: 'https://filestack.com',
                            },
                        };
                        _a = expect;
                        return [4 /*yield*/, data_1.parseResponse(response)];
                    case 1:
                        _a.apply(void 0, [_b.sent()]).toEqual(response);
                        return [2 /*return*/];
                }
            });
        }); });
        it('should parse application/xml response to json', function () { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
            var response, res;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        response = {
                            status: 200,
                            statusText: 'ok',
                            headers: {
                                'content-type': 'application/xml',
                            },
                            data: Buffer.from('<?xml version="1.0" encoding="UTF-8"?><Error><code>RequestTimeTooSkewed</code><Message>The difference between the request time and the current time is toolarge.</Message><RequestTime>20191102T153031Z</RequestTime><ServerTime>2019-11-02T15:56:35Z</ServerTime><MaxAllowedSkewMilliseconds>900000</MaxAllowedSkewMilliseconds><RequestId>6C8855BC97D17A1B</RequestId><HostId>3bwhtSpY9tAypFr9L6V+W6UAxFUyk7mK+VQGhIu4Bxj0t7jhQWMEEinW4YHpi8Q9qONnx1CEHKE=</HostId></Error>'),
                            config: {
                                url: 'https://filestack.com',
                            },
                        };
                        return [4 /*yield*/, data_1.parseResponse(response)];
                    case 1:
                        res = _a.sent();
                        return [2 /*return*/, expect(res.data).toEqual({
                                Error: {
                                    code: 'RequestTimeTooSkewed',
                                    Message: 'The difference between the request time and the current time is toolarge.',
                                    RequestTime: '20191102T153031Z',
                                    ServerTime: '2019-11-02T15:56:35Z',
                                    MaxAllowedSkewMilliseconds: 900000,
                                    RequestId: '6C8855BC97D17A1B',
                                    HostId: '3bwhtSpY9tAypFr9L6V+W6UAxFUyk7mK+VQGhIu4Bxj0t7jhQWMEEinW4YHpi8Q9qONnx1CEHKE=',
                                },
                            })];
                }
            });
        }); });
    });
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9saWIvcmVxdWVzdC9oZWxwZXJzL2RhdGEuc3BlYy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7Ozs7Ozs7Ozs7Ozs7OztHQWVHOzs7QUFFSCwrQkFBb0Q7QUFFcEQsUUFBUSxDQUFDLHNCQUFzQixFQUFFO0lBQy9CLFFBQVEsQ0FBQyxjQUFjLEVBQUU7UUFDdkIsRUFBRSxDQUFDLDBCQUEwQixFQUFFO1lBQzdCLElBQU0sSUFBSSxHQUFHLEVBQUUsR0FBRyxFQUFFLHVCQUF1QixFQUFFLElBQUksRUFBRSxFQUFFLEVBQUUsQ0FBQztZQUN4RCxNQUFNLENBQUMsa0JBQVcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUMxQyxDQUFDLENBQUMsQ0FBQztRQUVILEVBQUUsQ0FBQywyQkFBMkIsRUFBRTtZQUM5QixJQUFNLElBQUksR0FBRyxFQUFFLEdBQUcsRUFBRSx1QkFBdUIsRUFBRSxJQUFJLEVBQUUsSUFBSSxXQUFXLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQztZQUN6RSxNQUFNLENBQUMsa0JBQVcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUMxQyxDQUFDLENBQUMsQ0FBQztRQUVILEVBQUUsQ0FBQywwQkFBMEIsRUFBRTtZQUM3QixJQUFNLElBQUksR0FBRyxFQUFFLEdBQUcsRUFBRSx1QkFBdUIsRUFBRSxJQUFJLEVBQUUsSUFBSSxlQUFlLENBQUMsZUFBZSxDQUFDLEVBQUUsQ0FBQztZQUMxRixNQUFNLENBQUMsa0JBQVcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUMxQyxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUFDO0lBRUgsUUFBUSxDQUFDLGdCQUFnQixFQUFFO1FBQ3pCLEVBQUUsQ0FBQyxtQ0FBbUMsRUFBRTs7Ozs7d0JBQ2hDLFFBQVEsR0FB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RSxzQkFBc0I7b0NBQzVCLE9BQU8sRUFBRSwyRUFBMkU7b0NBQ3BGLFdBQVcsRUFBRSxrQkFBa0I7b0NBQy9CLFVBQVUsRUFBRSxzQkFBc0I7b0NBQ2xDLDBCQUEwQixFQUFFLE1BQU07b0NBQ2xDLFNBQVMsRUFBRSxrQkFBa0I7b0NBQzdCLE1BQU0sRUFBRSw4RUFBOEU7aUNBQ3ZGOzZCQUNGLENBQUMsRUFBQzs7O2FBQ0osQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMsQ0FBQyIsImZpbGUiOiJsaWIvcmVxdWVzdC9oZWxwZXJzL2RhdGEuc3BlYy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTggYnkgRmlsZXN0YWNrXG4gKiBTb21lIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgcHJlcGFyZURhdGEsIHBhcnNlUmVzcG9uc2UgfSBmcm9tICcuL2RhdGEnO1xuXG5kZXNjcmliZSgnUmVxdWVzdC9IZWxwZXJzL0RhdGEnLCAoKSA9PiB7XG4gIGRlc2NyaWJlKCdwcmVwYXJlIGRhdGEnLCAoKSA9PiB7XG4gICAgaXQoJ3Nob3VsZCByZXR1cm4gZW1wdHkgZGF0YScsICgpID0+IHtcbiAgICAgIGNvbnN0IGRhdGEgPSB7IHVybDogJ2h0dHBzOi8vZmlsZXN0YWNrLmNvbScsIGRhdGE6IHt9IH07XG4gICAgICBleHBlY3QocHJlcGFyZURhdGEoZGF0YSkpLnRvRXF1YWwoZGF0YSk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIHJldHVybiBBcnJheUJ1ZmZlcicsICgpID0+IHtcbiAgICAgIGNvbnN0IGRhdGEgPSB7IHVybDogJ2h0dHBzOi8vZmlsZXN0YWNrLmNvbScsIGRhdGE6IG5ldyBBcnJheUJ1ZmZlcigxMCkgfTtcbiAgICAgIGV4cGVjdChwcmVwYXJlRGF0YShkYXRhKSkudG9FcXVhbChkYXRhKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgcmV0dXJuIHVybCBwYXJhbXMnLCAoKSA9PiB7XG4gICAgICBjb25zdCBkYXRhID0geyB1cmw6ICdodHRwczovL2ZpbGVzdGFjay5jb20nLCBkYXRhOiBuZXcgVVJMU2VhcmNoUGFyYW1zKCdxPXNlYXJjaCZpZD0xJykgfTtcbiAgICAgIGV4cGVjdChwcmVwYXJlRGF0YShkYXRhKSkudG9FcXVhbChkYXRhKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ3BhcnNlIHJlc3BvbnNlJywgKCkgPT4ge1xuICAgIGl0KCdzaG91bGQgcmV0dXJuIGVxdWFsIHJlc3BvbnNlIGRhdGEnLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCByZXNwb25zZSA9IHtcbiAgICAgICAgc3RhdHVzOiAyMDAsXG4gICAgICAgIHN0YXR1c1RleHQ6ICdvaycsXG4gICAgICAgIGhlYWRlcnM6IHt9LFxuICAgICAgICBkYXRhOiBbXSxcbiAgICAgICAgY29uZmlnOiB7XG4gICAgICAgICAgdXJsOiAnaHR0cHM6Ly9maWxlc3RhY2suY29tJyxcbiAgICAgICAgfSxcbiAgICAgIH07XG4gICAgICBleHBlY3QoYXdhaXQgcGFyc2VSZXNwb25zZShyZXNwb25zZSkpLnRvRXF1YWwocmVzcG9uc2UpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCByZXR1cm4gcmVzcG9uc2Ugd2l0aCBhcHBsaWNhdGlvbi9qc29uIGFuZCBkYXRhIHN0cmluZ2lmeScsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0ge1xuICAgICAgICBzdGF0dXM6IDIwMCxcbiAgICAgICAgc3RhdHVzVGV4dDogJ29rJyxcbiAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgICdjb250ZW50LXR5cGUnOiAnYXBwbGljYXRpb24vanNvbicsXG4gICAgICAgIH0sXG4gICAgICAgIGRhdGE6IEpTT04uc3RyaW5naWZ5KHsgYTogMSB9KSxcbiAgICAgICAgY29uZmlnOiB7XG4gICAgICAgICAgdXJsOiAnaHR0cHM6Ly9maWxlc3RhY2suY29tJyxcbiAgICAgICAgfSxcbiAgICAgIH07XG4gICAgICBleHBlY3QoYXdhaXQgcGFyc2VSZXNwb25zZShyZXNwb25zZSkpLnRvRXF1YWwocmVzcG9uc2UpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCByZXR1cm4gcmVzcG9uc2Ugd2l0aCBhcHBsaWNhdGlvbi9qc29uIGFuZCBqc29uIGRhdGEgJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgcmVzcG9uc2UgPSB7XG4gICAgICAgIHN0YXR1czogMjAwLFxuICAgICAgICBzdGF0dXNUZXh0OiAnb2snLFxuICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgJ2NvbnRlbnQtdHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgICAgICAgfSxcbiAgICAgICAgZGF0YTogeyBhOiAxIH0sXG4gICAgICAgIGNvbmZpZzoge1xuICAgICAgICAgIHVybDogJ2h0dHBzOi8vZmlsZXN0YWNrLmNvbScsXG4gICAgICAgIH0sXG4gICAgICB9O1xuICAgICAgZXhwZWN0KGF3YWl0IHBhcnNlUmVzcG9uc2UocmVzcG9uc2UpKS50b0VxdWFsKHJlc3BvbnNlKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgcmV0dXJuIHRleHQvcGxhaW4gcmVzcG9uc2Ugd2l0aCBBcnJheUJ1ZmZlciAnLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCByZXNwb25zZSA9IHtcbiAgICAgICAgc3RhdHVzOiAyMDAsXG4gICAgICAgIHN0YXR1c1RleHQ6ICdvaycsXG4gICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICAnY29udGVudC10eXBlJzogJ3RleHQvcGxhaW4nLFxuICAgICAgICB9LFxuICAgICAgICBkYXRhOiBuZXcgQXJyYXlCdWZmZXIoMTApLFxuICAgICAgICBjb25maWc6IHtcbiAgICAgICAgICB1cmw6ICdodHRwczovL2ZpbGVzdGFjay5jb20nLFxuICAgICAgICB9LFxuICAgICAgfTtcbiAgICAgIGV4cGVjdChhd2FpdCBwYXJzZVJlc3BvbnNlKHJlc3BvbnNlKSkudG9FcXVhbChyZXNwb25zZSk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIHBhcnNlIGFwcGxpY2F0aW9uL3htbCByZXNwb25zZSB0byBqc29uJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgcmVzcG9uc2UgPSB7XG4gICAgICAgIHN0YXR1czogMjAwLFxuICAgICAgICBzdGF0dXNUZXh0OiAnb2snLFxuICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgJ2NvbnRlbnQtdHlwZSc6ICdhcHBsaWNhdGlvbi94bWwnLFxuICAgICAgICB9LFxuICAgICAgICBkYXRhOiBCdWZmZXIuZnJvbSgnPD94bWwgdmVyc2lvbj1cIjEuMFwiIGVuY29kaW5nPVwiVVRGLThcIj8+PEVycm9yPjxjb2RlPlJlcXVlc3RUaW1lVG9vU2tld2VkPC9jb2RlPjxNZXNzYWdlPlRoZSBkaWZmZXJlbmNlIGJldHdlZW4gdGhlIHJlcXVlc3QgdGltZSBhbmQgdGhlIGN1cnJlbnQgdGltZSBpcyB0b29sYXJnZS48L01lc3NhZ2U+PFJlcXVlc3RUaW1lPjIwMTkxMTAyVDE1MzAzMVo8L1JlcXVlc3RUaW1lPjxTZXJ2ZXJUaW1lPjIwMTktMTEtMDJUMTU6NTY6MzVaPC9TZXJ2ZXJUaW1lPjxNYXhBbGxvd2VkU2tld01pbGxpc2Vjb25kcz45MDAwMDA8L01heEFsbG93ZWRTa2V3TWlsbGlzZWNvbmRzPjxSZXF1ZXN0SWQ+NkM4ODU1QkM5N0QxN0ExQjwvUmVxdWVzdElkPjxIb3N0SWQ+M2J3aHRTcFk5dEF5cEZyOUw2VitXNlVBeEZVeWs3bUsrVlFHaEl1NEJ4ajB0N2poUVdNRUVpblc0WUhwaThROXFPTm54MUNFSEtFPTwvSG9zdElkPjwvRXJyb3I+JyksXG4gICAgICAgIGNvbmZpZzoge1xuICAgICAgICAgIHVybDogJ2h0dHBzOi8vZmlsZXN0YWNrLmNvbScsXG4gICAgICAgIH0sXG4gICAgICB9O1xuXG4gICAgICBjb25zdCByZXMgPSBhd2FpdCBwYXJzZVJlc3BvbnNlKHJlc3BvbnNlKTtcblxuICAgICAgcmV0dXJuIGV4cGVjdChyZXMuZGF0YSkudG9FcXVhbCh7XG4gICAgICAgIEVycm9yOiB7XG4gICAgICAgICAgY29kZTogJ1JlcXVlc3RUaW1lVG9vU2tld2VkJyxcbiAgICAgICAgICBNZXNzYWdlOiAnVGhlIGRpZmZlcmVuY2UgYmV0d2VlbiB0aGUgcmVxdWVzdCB0aW1lIGFuZCB0aGUgY3VycmVudCB0aW1lIGlzIHRvb2xhcmdlLicsXG4gICAgICAgICAgUmVxdWVzdFRpbWU6ICcyMDE5MTEwMlQxNTMwMzFaJyxcbiAgICAgICAgICBTZXJ2ZXJUaW1lOiAnMjAxOS0xMS0wMlQxNTo1NjozNVonLFxuICAgICAgICAgIE1heEFsbG93ZWRTa2V3TWlsbGlzZWNvbmRzOiA5MDAwMDAsXG4gICAgICAgICAgUmVxdWVzdElkOiAnNkM4ODU1QkM5N0QxN0ExQicsXG4gICAgICAgICAgSG9zdElkOiAnM2J3aHRTcFk5dEF5cEZyOUw2VitXNlVBeEZVeWs3bUsrVlFHaEl1NEJ4ajB0N2poUVdNRUVpblc0WUhwaThROXFPTm54MUNFSEtFPScsXG4gICAgICAgIH0sXG4gICAgICB9KTtcbiAgICB9KTtcbiAgfSk7XG59KTtcbiJdfQ==
