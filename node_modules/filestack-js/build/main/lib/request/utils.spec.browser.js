"use strict";
/*
 * Copyright (c) 2019 by Filestack.
 * Some rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var utils = require("./utils");
var printLog = function (status, name, value) { return name + " should return " + status + " when value is " + value; };
describe('Request/Utils', function () {
    describe('isBuffer', function () {
        // @ts-ignore
        it(printLog(false, 'isBuffer', '{}'), function () { return expect(utils.isBuffer()).toBeFalsy(); });
    });
    describe('isArrayBuffer', function () {
        it(printLog(true, 'isArrayBuffer', 'new ArrayBuffer(10)'), function () {
            expect(utils.isArrayBuffer(Buffer.alloc(10))).toBeFalsy();
        });
        it(printLog(true, 'isArrayBuffer', ''), function () {
            // @ts-ignore
            expect(utils.isArrayBuffer()).toBeFalsy();
        });
    });
    describe('isFile', function () {
        var file = new File(['foo'], 'foo.txt', { type: 'text/plain' });
        it(printLog(true, 'isFile', 'new File()'), function () { return expect(utils.isFile(file)).toBeTruthy(); });
    });
    describe('isBlob', function () {
        var parts = ['<a id="id"></a>'];
        var blob = new Blob(parts, { type: 'text/html' });
        it(printLog(true, 'isBlob', 'new Blob()'), function () { return expect(utils.isBlob(blob)).toBeTruthy(); });
    });
    describe('isFormData', function () {
        var formData = new FormData();
        formData.append('name', 'value');
        it(printLog(true, 'isFormData', "'value'"), function () { return expect(utils.isFormData(formData)).toBeTruthy(); });
    });
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9saWIvcmVxdWVzdC91dGlscy5zcGVjLmJyb3dzZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOzs7Ozs7Ozs7Ozs7Ozs7R0FlRzs7QUFFSCwrQkFBaUM7QUFFakMsSUFBTSxRQUFRLEdBQUcsVUFBQyxNQUF3QixFQUFFLElBQVksRUFBRSxLQUFhLElBQWEsT0FBRyxJQUFJLHVCQUFrQixNQUFNLHVCQUFrQixLQUFPLEVBQXhELENBQXdELENBQUM7QUFFN0ksUUFBUSxDQUFDLGVBQWUsRUFBRTtJQUN4QixRQUFRLENBQUMsVUFBVSxFQUFFO1FBQ25CLGFBQWE7UUFDYixFQUFFLENBQUMsUUFBUSxDQUFDLEtBQUssRUFBRSxVQUFVLEVBQUUsSUFBSSxDQUFDLEVBQUUsY0FBTSxPQUFBLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQyxTQUFTLEVBQUUsRUFBcEMsQ0FBb0MsQ0FBQyxDQUFDO0lBQ3BGLENBQUMsQ0FBQyxDQUFDO0lBRUgsUUFBUSxDQUFDLGVBQWUsRUFBRTtRQUN4QixFQUFFLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxlQUFlLEVBQUUscUJBQXFCLENBQUMsRUFBRTtZQUN6RCxNQUFNLENBQUMsS0FBSyxDQUFDLGFBQWEsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLEVBQUUsQ0FBQztRQUM1RCxDQUFDLENBQUMsQ0FBQztRQUNILEVBQUUsQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLGVBQWUsRUFBRSxFQUFFLENBQUMsRUFBRTtZQUN0QyxhQUFhO1lBQ2IsTUFBTSxDQUFDLEtBQUssQ0FBQyxhQUFhLEVBQUUsQ0FBQyxDQUFDLFNBQVMsRUFBRSxDQUFDO1FBQzVDLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDLENBQUM7SUFFSCxRQUFRLENBQUMsUUFBUSxFQUFFO1FBQ2pCLElBQU0sSUFBSSxHQUFTLElBQUksSUFBSSxDQUFDLENBQUMsS0FBSyxDQUFDLEVBQUUsU0FBUyxFQUFFLEVBQUUsSUFBSSxFQUFFLFlBQVksRUFBRSxDQUFDLENBQUM7UUFDeEUsRUFBRSxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsUUFBUSxFQUFFLFlBQVksQ0FBQyxFQUFFLGNBQU0sT0FBQSxNQUFNLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLFVBQVUsRUFBRSxFQUF2QyxDQUF1QyxDQUFDLENBQUM7SUFDNUYsQ0FBQyxDQUFDLENBQUM7SUFFSCxRQUFRLENBQUMsUUFBUSxFQUFFO1FBQ2pCLElBQU0sS0FBSyxHQUFHLENBQUMsaUJBQWlCLENBQUMsQ0FBQztRQUNsQyxJQUFNLElBQUksR0FBUyxJQUFJLElBQUksQ0FBQyxLQUFLLEVBQUUsRUFBRSxJQUFJLEVBQUUsV0FBVyxFQUFFLENBQUMsQ0FBQztRQUMxRCxFQUFFLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxRQUFRLEVBQUUsWUFBWSxDQUFDLEVBQUUsY0FBTSxPQUFBLE1BQU0sQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsVUFBVSxFQUFFLEVBQXZDLENBQXVDLENBQUMsQ0FBQztJQUM1RixDQUFDLENBQUMsQ0FBQztJQUVILFFBQVEsQ0FBQyxZQUFZLEVBQUU7UUFDckIsSUFBTSxRQUFRLEdBQWEsSUFBSSxRQUFRLEVBQUUsQ0FBQztRQUMxQyxRQUFRLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxPQUFPLENBQUMsQ0FBQztRQUNqQyxFQUFFLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxZQUFZLEVBQUUsU0FBUyxDQUFDLEVBQUUsY0FBTSxPQUFBLE1BQU0sQ0FBQyxLQUFLLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsVUFBVSxFQUFFLEVBQS9DLENBQStDLENBQUMsQ0FBQztJQUNyRyxDQUFDLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQyxDQUFDIiwiZmlsZSI6ImxpYi9yZXF1ZXN0L3V0aWxzLnNwZWMuYnJvd3Nlci5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTkgYnkgRmlsZXN0YWNrLlxuICogU29tZSByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCAqIGFzIHV0aWxzIGZyb20gJy4vdXRpbHMnO1xuXG5jb25zdCBwcmludExvZyA9IChzdGF0dXM6IGJvb2xlYW4gfCBzdHJpbmcsIG5hbWU6IHN0cmluZywgdmFsdWU6IHN0cmluZyk6IHN0cmluZyA9PiBgJHtuYW1lfSBzaG91bGQgcmV0dXJuICR7c3RhdHVzfSB3aGVuIHZhbHVlIGlzICR7dmFsdWV9YDtcblxuZGVzY3JpYmUoJ1JlcXVlc3QvVXRpbHMnLCAoKSA9PiB7XG4gIGRlc2NyaWJlKCdpc0J1ZmZlcicsICgpID0+IHtcbiAgICAvLyBAdHMtaWdub3JlXG4gICAgaXQocHJpbnRMb2coZmFsc2UsICdpc0J1ZmZlcicsICd7fScpLCAoKSA9PiBleHBlY3QodXRpbHMuaXNCdWZmZXIoKSkudG9CZUZhbHN5KCkpO1xuICB9KTtcblxuICBkZXNjcmliZSgnaXNBcnJheUJ1ZmZlcicsICgpID0+IHtcbiAgICBpdChwcmludExvZyh0cnVlLCAnaXNBcnJheUJ1ZmZlcicsICduZXcgQXJyYXlCdWZmZXIoMTApJyksICgpID0+IHtcbiAgICAgIGV4cGVjdCh1dGlscy5pc0FycmF5QnVmZmVyKEJ1ZmZlci5hbGxvYygxMCkpKS50b0JlRmFsc3koKTtcbiAgICB9KTtcbiAgICBpdChwcmludExvZyh0cnVlLCAnaXNBcnJheUJ1ZmZlcicsICcnKSwgKCkgPT4ge1xuICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgZXhwZWN0KHV0aWxzLmlzQXJyYXlCdWZmZXIoKSkudG9CZUZhbHN5KCk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdpc0ZpbGUnLCAoKSA9PiB7XG4gICAgY29uc3QgZmlsZTogRmlsZSA9IG5ldyBGaWxlKFsnZm9vJ10sICdmb28udHh0JywgeyB0eXBlOiAndGV4dC9wbGFpbicgfSk7XG4gICAgaXQocHJpbnRMb2codHJ1ZSwgJ2lzRmlsZScsICduZXcgRmlsZSgpJyksICgpID0+IGV4cGVjdCh1dGlscy5pc0ZpbGUoZmlsZSkpLnRvQmVUcnV0aHkoKSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdpc0Jsb2InLCAoKSA9PiB7XG4gICAgY29uc3QgcGFydHMgPSBbJzxhIGlkPVwiaWRcIj48L2E+J107XG4gICAgY29uc3QgYmxvYjogQmxvYiA9IG5ldyBCbG9iKHBhcnRzLCB7IHR5cGU6ICd0ZXh0L2h0bWwnIH0pO1xuICAgIGl0KHByaW50TG9nKHRydWUsICdpc0Jsb2InLCAnbmV3IEJsb2IoKScpLCAoKSA9PiBleHBlY3QodXRpbHMuaXNCbG9iKGJsb2IpKS50b0JlVHJ1dGh5KCkpO1xuICB9KTtcblxuICBkZXNjcmliZSgnaXNGb3JtRGF0YScsICgpID0+IHtcbiAgICBjb25zdCBmb3JtRGF0YTogRm9ybURhdGEgPSBuZXcgRm9ybURhdGEoKTtcbiAgICBmb3JtRGF0YS5hcHBlbmQoJ25hbWUnLCAndmFsdWUnKTtcbiAgICBpdChwcmludExvZyh0cnVlLCAnaXNGb3JtRGF0YScsIFwiJ3ZhbHVlJ1wiKSwgKCkgPT4gZXhwZWN0KHV0aWxzLmlzRm9ybURhdGEoZm9ybURhdGEpKS50b0JlVHJ1dGh5KCkpO1xuICB9KTtcbn0pO1xuIl19
