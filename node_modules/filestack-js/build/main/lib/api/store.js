"use strict";
/*
 * Copyright (c) 2018 by Filestack.
 * Some rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var filelink_1 = require("./../filelink");
var filestack_error_1 = require("./../../filestack_error");
var schema_1 = require("./../../schema");
var request_1 = require("../request");
/**
 * Store given url with options and
 *
 * @param session
 * @param url
 * @param storeOpts
 * @param token
 * @param security
 * @param uploadTags
 */
exports.storeURL = function (_a) {
    var session = _a.session, url = _a.url, storeParams = _a.storeParams, token = _a.token, security = _a.security, uploadTags = _a.uploadTags;
    if (!url || typeof url !== 'string') {
        return Promise.reject(new filestack_error_1.FilestackError('url is required for storeURL'));
    }
    var validateRes = schema_1.getValidator(schema_1.StoreParamsSchema)(storeParams);
    if (validateRes.errors.length) {
        return Promise.reject(new filestack_error_1.FilestackError("Invalid store params", validateRes.errors));
    }
    session.policy = security && security.policy || session.policy;
    session.signature = security && security.signature || session.signature;
    var filelink = new filelink_1.Filelink(url, session.apikey);
    filelink.store(storeParams);
    if (session.policy && session.signature) {
        filelink.security({
            policy: session.policy,
            signature: session.signature,
        });
    }
    var options = {};
    if (token) {
        var cancelToken = new request_1.FsCancelToken();
        token.cancel = cancelToken.cancel.bind(cancelToken);
        options.cancelToken = cancelToken;
    }
    return request_1.FsRequest.post(session.urls.processUrl + "/process", {
        apikey: session.apikey,
        sources: [url],
        tasks: filelink.getTasks(),
        upload_tags: uploadTags ? uploadTags : undefined,
    }, options).then(function (res) {
        if (res.data && res.data.handle) {
            if (res.data.upload_tags) {
                res.data.uploadTags = res.data.upload_tags;
                delete res.data.upload_tags;
            }
            return tslib_1.__assign(tslib_1.__assign({}, res.data), { mimetype: res.data.type });
        }
        throw new filestack_error_1.FilestackError("Invalid store response " + JSON.stringify(res.data));
    });
};

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9saWIvYXBpL3N0b3JlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7Ozs7Ozs7Ozs7Ozs7O0dBZUc7OztBQUdILDBDQUFzRDtBQUN0RCwyREFBeUQ7QUFDekQseUNBQWlFO0FBQ2pFLHNDQUFzRDtBQVl0RDs7Ozs7Ozs7O0dBU0c7QUFDVSxRQUFBLFFBQVEsR0FBRyxVQUFDLEVBT1I7UUFOZixvQkFBTyxFQUNQLFlBQUcsRUFDSCw0QkFBVyxFQUNYLGdCQUFLLEVBQ0wsc0JBQVEsRUFDUiwwQkFBVTtJQUVWLElBQUksQ0FBQyxHQUFHLElBQUksT0FBTyxHQUFHLEtBQUssUUFBUSxFQUFFO1FBQ25DLE9BQU8sT0FBTyxDQUFDLE1BQU0sQ0FBQyxJQUFJLGdDQUFjLENBQUMsOEJBQThCLENBQUMsQ0FBQyxDQUFDO0tBQzNFO0lBRUQsSUFBTSxXQUFXLEdBQUcscUJBQVksQ0FBQywwQkFBaUIsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxDQUFDO0lBRWpFLElBQUksV0FBVyxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUU7UUFDN0IsT0FBTyxPQUFPLENBQUMsTUFBTSxDQUFDLElBQUksZ0NBQWMsQ0FBQyxzQkFBc0IsRUFBRSxXQUFXLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztLQUN2RjtJQUVELE9BQU8sQ0FBQyxNQUFNLEdBQUcsUUFBUSxJQUFJLFFBQVEsQ0FBQyxNQUFNLElBQUksT0FBTyxDQUFDLE1BQU0sQ0FBQztJQUMvRCxPQUFPLENBQUMsU0FBUyxHQUFHLFFBQVEsSUFBSSxRQUFRLENBQUMsU0FBUyxJQUFJLE9BQU8sQ0FBQyxTQUFTLENBQUM7SUFFeEUsSUFBTSxRQUFRLEdBQUcsSUFBSSxtQkFBUSxDQUFDLEdBQUcsRUFBRSxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDbkQsUUFBUSxDQUFDLEtBQUssQ0FBQyxXQUFXLENBQUMsQ0FBQztJQUU1QixJQUFJLE9BQU8sQ0FBQyxNQUFNLElBQUksT0FBTyxDQUFDLFNBQVMsRUFBRTtRQUN2QyxRQUFRLENBQUMsUUFBUSxDQUFDO1lBQ2hCLE1BQU0sRUFBRSxPQUFPLENBQUMsTUFBTTtZQUN0QixTQUFTLEVBQUUsT0FBTyxDQUFDLFNBQVM7U0FDN0IsQ0FBQyxDQUFDO0tBQ0o7SUFFRCxJQUFJLE9BQU8sR0FBUSxFQUFFLENBQUM7SUFFdEIsSUFBSSxLQUFLLEVBQUU7UUFDVCxJQUFNLFdBQVcsR0FBRyxJQUFJLHVCQUFhLEVBQUUsQ0FBQztRQUN4QyxLQUFLLENBQUMsTUFBTSxHQUFHLFdBQVcsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBQ3BELE9BQU8sQ0FBQyxXQUFXLEdBQUcsV0FBVyxDQUFDO0tBQ25DO0lBRUQsT0FBTyxtQkFBUyxDQUFDLElBQUksQ0FBSSxPQUFPLENBQUMsSUFBSSxDQUFDLFVBQVUsYUFBVSxFQUFFO1FBQzFELE1BQU0sRUFBRSxPQUFPLENBQUMsTUFBTTtRQUN0QixPQUFPLEVBQUUsQ0FBRSxHQUFHLENBQUU7UUFDaEIsS0FBSyxFQUFFLFFBQVEsQ0FBQyxRQUFRLEVBQUU7UUFDMUIsV0FBVyxFQUFFLFVBQVUsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxTQUFTO0tBQ2pELEVBQUUsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQUMsR0FBRztRQUNuQixJQUFJLEdBQUcsQ0FBQyxJQUFJLElBQUksR0FBRyxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUU7WUFDL0IsSUFBSSxHQUFHLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRTtnQkFDeEIsR0FBRyxDQUFDLElBQUksQ0FBQyxVQUFVLEdBQUcsR0FBRyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUM7Z0JBQzNDLE9BQU8sR0FBRyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUM7YUFDN0I7WUFFRCw2Q0FBWSxHQUFHLENBQUMsSUFBSSxLQUFFLFFBQVEsRUFBRSxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksSUFBRztTQUNqRDtRQUVELE1BQU0sSUFBSSxnQ0FBYyxDQUFDLDRCQUEwQixJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUcsQ0FBQyxDQUFDO0lBQ2pGLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDIiwiZmlsZSI6ImxpYi9hcGkvc3RvcmUuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogQ29weXJpZ2h0IChjKSAyMDE4IGJ5IEZpbGVzdGFjay5cbiAqIFNvbWUgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBTZWN1cml0eSwgU2Vzc2lvbiB9IGZyb20gJy4uL2NsaWVudCc7XG5pbXBvcnQgeyBGaWxlbGluaywgU3RvcmVQYXJhbXMgfSBmcm9tICcuLy4uL2ZpbGVsaW5rJztcbmltcG9ydCB7IEZpbGVzdGFja0Vycm9yIH0gZnJvbSAnLi8uLi8uLi9maWxlc3RhY2tfZXJyb3InO1xuaW1wb3J0IHsgZ2V0VmFsaWRhdG9yLCBTdG9yZVBhcmFtc1NjaGVtYSB9IGZyb20gJy4vLi4vLi4vc2NoZW1hJztcbmltcG9ydCB7IEZzUmVxdWVzdCwgRnNDYW5jZWxUb2tlbiB9IGZyb20gJy4uL3JlcXVlc3QnO1xuaW1wb3J0IHsgVXBsb2FkVGFncyB9IGZyb20gJy4vdXBsb2FkL2ZpbGUnO1xuXG5leHBvcnQgdHlwZSBTdG9yZVVybFBhcmFtcyA9IHtcbiAgc2Vzc2lvbjogU2Vzc2lvbjtcbiAgdXJsPzogc3RyaW5nO1xuICBzdG9yZVBhcmFtcz86IFN0b3JlUGFyYW1zO1xuICB0b2tlbj86IGFueTtcbiAgc2VjdXJpdHk/OiBTZWN1cml0eTtcbiAgdXBsb2FkVGFncz86IFVwbG9hZFRhZ3M7XG59O1xuXG4vKipcbiAqIFN0b3JlIGdpdmVuIHVybCB3aXRoIG9wdGlvbnMgYW5kXG4gKlxuICogQHBhcmFtIHNlc3Npb25cbiAqIEBwYXJhbSB1cmxcbiAqIEBwYXJhbSBzdG9yZU9wdHNcbiAqIEBwYXJhbSB0b2tlblxuICogQHBhcmFtIHNlY3VyaXR5XG4gKiBAcGFyYW0gdXBsb2FkVGFnc1xuICovXG5leHBvcnQgY29uc3Qgc3RvcmVVUkwgPSAoe1xuICBzZXNzaW9uLFxuICB1cmwsXG4gIHN0b3JlUGFyYW1zLFxuICB0b2tlbixcbiAgc2VjdXJpdHksXG4gIHVwbG9hZFRhZ3MsXG59OiBTdG9yZVVybFBhcmFtcyk6IFByb21pc2U8YW55PiA9PiB7XG4gIGlmICghdXJsIHx8IHR5cGVvZiB1cmwgIT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBGaWxlc3RhY2tFcnJvcigndXJsIGlzIHJlcXVpcmVkIGZvciBzdG9yZVVSTCcpKTtcbiAgfVxuXG4gIGNvbnN0IHZhbGlkYXRlUmVzID0gZ2V0VmFsaWRhdG9yKFN0b3JlUGFyYW1zU2NoZW1hKShzdG9yZVBhcmFtcyk7XG5cbiAgaWYgKHZhbGlkYXRlUmVzLmVycm9ycy5sZW5ndGgpIHtcbiAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IEZpbGVzdGFja0Vycm9yKGBJbnZhbGlkIHN0b3JlIHBhcmFtc2AsIHZhbGlkYXRlUmVzLmVycm9ycykpO1xuICB9XG5cbiAgc2Vzc2lvbi5wb2xpY3kgPSBzZWN1cml0eSAmJiBzZWN1cml0eS5wb2xpY3kgfHwgc2Vzc2lvbi5wb2xpY3k7XG4gIHNlc3Npb24uc2lnbmF0dXJlID0gc2VjdXJpdHkgJiYgc2VjdXJpdHkuc2lnbmF0dXJlIHx8IHNlc3Npb24uc2lnbmF0dXJlO1xuXG4gIGNvbnN0IGZpbGVsaW5rID0gbmV3IEZpbGVsaW5rKHVybCwgc2Vzc2lvbi5hcGlrZXkpO1xuICBmaWxlbGluay5zdG9yZShzdG9yZVBhcmFtcyk7XG5cbiAgaWYgKHNlc3Npb24ucG9saWN5ICYmIHNlc3Npb24uc2lnbmF0dXJlKSB7XG4gICAgZmlsZWxpbmsuc2VjdXJpdHkoe1xuICAgICAgcG9saWN5OiBzZXNzaW9uLnBvbGljeSxcbiAgICAgIHNpZ25hdHVyZTogc2Vzc2lvbi5zaWduYXR1cmUsXG4gICAgfSk7XG4gIH1cblxuICBsZXQgb3B0aW9uczogYW55ID0ge307XG5cbiAgaWYgKHRva2VuKSB7XG4gICAgY29uc3QgY2FuY2VsVG9rZW4gPSBuZXcgRnNDYW5jZWxUb2tlbigpO1xuICAgIHRva2VuLmNhbmNlbCA9IGNhbmNlbFRva2VuLmNhbmNlbC5iaW5kKGNhbmNlbFRva2VuKTtcbiAgICBvcHRpb25zLmNhbmNlbFRva2VuID0gY2FuY2VsVG9rZW47XG4gIH1cblxuICByZXR1cm4gRnNSZXF1ZXN0LnBvc3QoYCR7c2Vzc2lvbi51cmxzLnByb2Nlc3NVcmx9L3Byb2Nlc3NgLCB7XG4gICAgYXBpa2V5OiBzZXNzaW9uLmFwaWtleSxcbiAgICBzb3VyY2VzOiBbIHVybCBdLFxuICAgIHRhc2tzOiBmaWxlbGluay5nZXRUYXNrcygpLFxuICAgIHVwbG9hZF90YWdzOiB1cGxvYWRUYWdzID8gdXBsb2FkVGFncyA6IHVuZGVmaW5lZCxcbiAgfSwgb3B0aW9ucykudGhlbigocmVzKSA9PiB7XG4gICAgaWYgKHJlcy5kYXRhICYmIHJlcy5kYXRhLmhhbmRsZSkge1xuICAgICAgaWYgKHJlcy5kYXRhLnVwbG9hZF90YWdzKSB7XG4gICAgICAgIHJlcy5kYXRhLnVwbG9hZFRhZ3MgPSByZXMuZGF0YS51cGxvYWRfdGFncztcbiAgICAgICAgZGVsZXRlIHJlcy5kYXRhLnVwbG9hZF90YWdzO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4geyAuLi5yZXMuZGF0YSwgbWltZXR5cGU6IHJlcy5kYXRhLnR5cGUgfTtcbiAgICB9XG5cbiAgICB0aHJvdyBuZXcgRmlsZXN0YWNrRXJyb3IoYEludmFsaWQgc3RvcmUgcmVzcG9uc2UgJHtKU09OLnN0cmluZ2lmeShyZXMuZGF0YSl9YCk7XG4gIH0pO1xufTtcbiJdfQ==
