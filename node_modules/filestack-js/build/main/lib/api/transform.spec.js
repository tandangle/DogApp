"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
/*
 * Copyright (c) 2018 by Filestack.
 * Some rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var transform_1 = require("./transform");
var config_1 = require("./../../config");
var filelink_1 = require("./../filelink");
jest.mock('./../filelink');
var defaultApikey = 'EXAMPLE_API_KEY';
var defaultHandle = 'EXAMPLE_HANDLE';
var defaultSecurity = {
    policy: 'examplePolicy',
    signature: 'exampleSignature',
};
var sessionURls = config_1.config.urls;
var defaultSession = {
    apikey: defaultApikey,
    urls: sessionURls,
};
describe('OldTransforms', function () {
    it('should pass params to Filelink class', function () {
        transform_1.transform(defaultSession, defaultHandle, {
            partial_pixelate: {
                amount: 2,
            },
        });
        expect(filelink_1.Filelink.prototype.addTask).toHaveBeenCalledWith('partial_pixelate', {
            amount: 2,
        });
    });
    it('should respect security params', function () {
        transform_1.transform(tslib_1.__assign(tslib_1.__assign({}, defaultSession), defaultSecurity), defaultHandle, {
            partial_pixelate: {
                amount: 2,
            },
        });
        expect(filelink_1.Filelink.prototype.addTask).toHaveBeenCalledWith('security', defaultSecurity);
    });
    it('should respect cache=false transformation', function () {
        transform_1.transform(defaultSession, defaultHandle, {
            // @ts-ignore
            cache: false,
        });
        expect(filelink_1.Filelink.prototype.addTask).toHaveBeenCalledWith('cache', false);
    });
    it('should remove falsy parameters transformation', function () {
        transform_1.transform(defaultSession, defaultHandle, {
            flip: false,
        });
        expect(filelink_1.Filelink.prototype.addTask).not.toHaveBeenCalledWith('flip', false);
    });
    it('should change cammel case to snake case transformations', function () {
        transform_1.transform(defaultSession, defaultHandle, {
            // @ts-ignore
            partialPixelate: {
                amount: 2,
            },
        });
        expect(filelink_1.Filelink.prototype.addTask).toHaveBeenCalledWith('partial_pixelate', {
            amount: 2,
        });
    });
    it('return call toString on filelink when params are empty', function () {
        var testUrl = 'nanana';
        spyOn(filelink_1.Filelink.prototype, 'toString').and.callFake(function () { return testUrl; });
        expect(transform_1.transform(defaultSession, defaultHandle)).toEqual(testUrl);
    });
    it('should enable base64 on filelink', function () {
        transform_1.transform(defaultSession, defaultHandle, {
            // @ts-ignore
            partialPixelate: {
                amount: 2,
            },
        }, true);
        expect(filelink_1.Filelink.prototype.setBase64).toHaveBeenCalledWith(true);
    });
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9saWIvYXBpL3RyYW5zZm9ybS5zcGVjLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBOzs7Ozs7Ozs7Ozs7Ozs7R0FlRztBQUNILHlDQUF3QztBQUN4Qyx5Q0FBd0M7QUFDeEMsMENBQXlDO0FBRXpDLElBQUksQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLENBQUM7QUFFM0IsSUFBTSxhQUFhLEdBQUcsaUJBQWlCLENBQUM7QUFDeEMsSUFBTSxhQUFhLEdBQUcsZ0JBQWdCLENBQUM7QUFDdkMsSUFBTSxlQUFlLEdBQUc7SUFDdEIsTUFBTSxFQUFFLGVBQWU7SUFDdkIsU0FBUyxFQUFFLGtCQUFrQjtDQUM5QixDQUFDO0FBRUYsSUFBTSxXQUFXLEdBQUcsZUFBTSxDQUFDLElBQUksQ0FBQztBQUNoQyxJQUFNLGNBQWMsR0FBRztJQUNyQixNQUFNLEVBQUUsYUFBYTtJQUNyQixJQUFJLEVBQUUsV0FBVztDQUNsQixDQUFDO0FBRUYsUUFBUSxDQUFDLGVBQWUsRUFBRTtJQUN4QixFQUFFLENBQUMsc0NBQXNDLEVBQUU7UUFDekMscUJBQVMsQ0FDUCxjQUFjLEVBQ2QsYUFBYSxFQUNiO1lBQ0UsZ0JBQWdCLEVBQUU7Z0JBQ2hCLE1BQU0sRUFBRSxDQUFDO2FBQ1Y7U0FDRixDQUNGLENBQUM7UUFFRixNQUFNLENBQUMsbUJBQVEsQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLENBQUMsb0JBQW9CLENBQUMsa0JBQWtCLEVBQUU7WUFDMUUsTUFBTSxFQUFFLENBQUM7U0FDVixDQUFDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQztJQUVILEVBQUUsQ0FBQyxnQ0FBZ0MsRUFBRTtRQUNuQyxxQkFBUyx1Q0FFRixjQUFjLEdBQ2QsZUFBZSxHQUVwQixhQUFhLEVBQ2I7WUFDRSxnQkFBZ0IsRUFBRTtnQkFDaEIsTUFBTSxFQUFFLENBQUM7YUFDVjtTQUNGLENBQ0YsQ0FBQztRQUVGLE1BQU0sQ0FBQyxtQkFBUSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxvQkFBb0IsQ0FBQyxVQUFVLEVBQUUsZUFBZSxDQUFDLENBQUM7SUFDdkYsQ0FBQyxDQUFDLENBQUM7SUFFSCxFQUFFLENBQUMsMkNBQTJDLEVBQUU7UUFDOUMscUJBQVMsQ0FDUCxjQUFjLEVBQ2QsYUFBYSxFQUNiO1lBQ0UsYUFBYTtZQUNiLEtBQUssRUFBRSxLQUFLO1NBQ2IsQ0FDRixDQUFDO1FBRUYsTUFBTSxDQUFDLG1CQUFRLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxDQUFDLG9CQUFvQixDQUFDLE9BQU8sRUFBRSxLQUFLLENBQUMsQ0FBQztJQUMxRSxDQUFDLENBQUMsQ0FBQztJQUVILEVBQUUsQ0FBQywrQ0FBK0MsRUFBRTtRQUNsRCxxQkFBUyxDQUNQLGNBQWMsRUFDZCxhQUFhLEVBQ2I7WUFDRSxJQUFJLEVBQUUsS0FBSztTQUNaLENBQ0YsQ0FBQztRQUVGLE1BQU0sQ0FBQyxtQkFBUSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxHQUFHLENBQUMsb0JBQW9CLENBQUMsTUFBTSxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQzdFLENBQUMsQ0FBQyxDQUFDO0lBRUgsRUFBRSxDQUFDLHlEQUF5RCxFQUFFO1FBQzVELHFCQUFTLENBQ1AsY0FBYyxFQUNkLGFBQWEsRUFDYjtZQUNFLGFBQWE7WUFDYixlQUFlLEVBQUU7Z0JBQ2YsTUFBTSxFQUFFLENBQUM7YUFDVjtTQUNGLENBQ0YsQ0FBQztRQUVGLE1BQU0sQ0FBQyxtQkFBUSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxvQkFBb0IsQ0FBQyxrQkFBa0IsRUFBRTtZQUMxRSxNQUFNLEVBQUUsQ0FBQztTQUNWLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUFDO0lBRUgsRUFBRSxDQUFDLHdEQUF3RCxFQUFFO1FBQzNELElBQU0sT0FBTyxHQUFHLFFBQVEsQ0FBQztRQUN6QixLQUFLLENBQUMsbUJBQVEsQ0FBQyxTQUFTLEVBQUUsVUFBVSxDQUFDLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxjQUFNLE9BQUEsT0FBTyxFQUFQLENBQU8sQ0FBQyxDQUFDO1FBRWxFLE1BQU0sQ0FBQyxxQkFBUyxDQUNkLGNBQWMsRUFDZCxhQUFhLENBQ2QsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUN0QixDQUFDLENBQUMsQ0FBQztJQUVILEVBQUUsQ0FBQyxrQ0FBa0MsRUFBRTtRQUNyQyxxQkFBUyxDQUNQLGNBQWMsRUFDZCxhQUFhLEVBQ2I7WUFDRSxhQUFhO1lBQ2IsZUFBZSxFQUFFO2dCQUNmLE1BQU0sRUFBRSxDQUFDO2FBQ1Y7U0FDRixFQUNELElBQUksQ0FDTCxDQUFDO1FBRUYsTUFBTSxDQUFDLG1CQUFRLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxDQUFDLG9CQUFvQixDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ2xFLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUMiLCJmaWxlIjoibGliL2FwaS90cmFuc2Zvcm0uc3BlYy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTggYnkgRmlsZXN0YWNrLlxuICogU29tZSByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5pbXBvcnQgeyB0cmFuc2Zvcm0gfSBmcm9tICcuL3RyYW5zZm9ybSc7XG5pbXBvcnQgeyBjb25maWcgfSBmcm9tICcuLy4uLy4uL2NvbmZpZyc7XG5pbXBvcnQgeyBGaWxlbGluayB9IGZyb20gJy4vLi4vZmlsZWxpbmsnO1xuXG5qZXN0Lm1vY2soJy4vLi4vZmlsZWxpbmsnKTtcblxuY29uc3QgZGVmYXVsdEFwaWtleSA9ICdFWEFNUExFX0FQSV9LRVknO1xuY29uc3QgZGVmYXVsdEhhbmRsZSA9ICdFWEFNUExFX0hBTkRMRSc7XG5jb25zdCBkZWZhdWx0U2VjdXJpdHkgPSB7XG4gIHBvbGljeTogJ2V4YW1wbGVQb2xpY3knLFxuICBzaWduYXR1cmU6ICdleGFtcGxlU2lnbmF0dXJlJyxcbn07XG5cbmNvbnN0IHNlc3Npb25VUmxzID0gY29uZmlnLnVybHM7XG5jb25zdCBkZWZhdWx0U2Vzc2lvbiA9IHtcbiAgYXBpa2V5OiBkZWZhdWx0QXBpa2V5LFxuICB1cmxzOiBzZXNzaW9uVVJscyxcbn07XG5cbmRlc2NyaWJlKCdPbGRUcmFuc2Zvcm1zJywgKCkgPT4ge1xuICBpdCgnc2hvdWxkIHBhc3MgcGFyYW1zIHRvIEZpbGVsaW5rIGNsYXNzJywgKCkgPT4ge1xuICAgIHRyYW5zZm9ybShcbiAgICAgIGRlZmF1bHRTZXNzaW9uLFxuICAgICAgZGVmYXVsdEhhbmRsZSxcbiAgICAgIHtcbiAgICAgICAgcGFydGlhbF9waXhlbGF0ZToge1xuICAgICAgICAgIGFtb3VudDogMixcbiAgICAgICAgfSxcbiAgICAgIH1cbiAgICApO1xuXG4gICAgZXhwZWN0KEZpbGVsaW5rLnByb3RvdHlwZS5hZGRUYXNrKS50b0hhdmVCZWVuQ2FsbGVkV2l0aCgncGFydGlhbF9waXhlbGF0ZScsIHtcbiAgICAgIGFtb3VudDogMixcbiAgICB9KTtcbiAgfSk7XG5cbiAgaXQoJ3Nob3VsZCByZXNwZWN0IHNlY3VyaXR5IHBhcmFtcycsICgpID0+IHtcbiAgICB0cmFuc2Zvcm0oXG4gICAgICB7XG4gICAgICAgIC4uLmRlZmF1bHRTZXNzaW9uLFxuICAgICAgICAuLi5kZWZhdWx0U2VjdXJpdHksXG4gICAgICB9LFxuICAgICAgZGVmYXVsdEhhbmRsZSxcbiAgICAgIHtcbiAgICAgICAgcGFydGlhbF9waXhlbGF0ZToge1xuICAgICAgICAgIGFtb3VudDogMixcbiAgICAgICAgfSxcbiAgICAgIH1cbiAgICApO1xuXG4gICAgZXhwZWN0KEZpbGVsaW5rLnByb3RvdHlwZS5hZGRUYXNrKS50b0hhdmVCZWVuQ2FsbGVkV2l0aCgnc2VjdXJpdHknLCBkZWZhdWx0U2VjdXJpdHkpO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIHJlc3BlY3QgY2FjaGU9ZmFsc2UgdHJhbnNmb3JtYXRpb24nLCAoKSA9PiB7XG4gICAgdHJhbnNmb3JtKFxuICAgICAgZGVmYXVsdFNlc3Npb24sXG4gICAgICBkZWZhdWx0SGFuZGxlLFxuICAgICAge1xuICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgIGNhY2hlOiBmYWxzZSxcbiAgICAgIH1cbiAgICApO1xuXG4gICAgZXhwZWN0KEZpbGVsaW5rLnByb3RvdHlwZS5hZGRUYXNrKS50b0hhdmVCZWVuQ2FsbGVkV2l0aCgnY2FjaGUnLCBmYWxzZSk7XG4gIH0pO1xuXG4gIGl0KCdzaG91bGQgcmVtb3ZlIGZhbHN5IHBhcmFtZXRlcnMgdHJhbnNmb3JtYXRpb24nLCAoKSA9PiB7XG4gICAgdHJhbnNmb3JtKFxuICAgICAgZGVmYXVsdFNlc3Npb24sXG4gICAgICBkZWZhdWx0SGFuZGxlLFxuICAgICAge1xuICAgICAgICBmbGlwOiBmYWxzZSxcbiAgICAgIH1cbiAgICApO1xuXG4gICAgZXhwZWN0KEZpbGVsaW5rLnByb3RvdHlwZS5hZGRUYXNrKS5ub3QudG9IYXZlQmVlbkNhbGxlZFdpdGgoJ2ZsaXAnLCBmYWxzZSk7XG4gIH0pO1xuXG4gIGl0KCdzaG91bGQgY2hhbmdlIGNhbW1lbCBjYXNlIHRvIHNuYWtlIGNhc2UgdHJhbnNmb3JtYXRpb25zJywgKCkgPT4ge1xuICAgIHRyYW5zZm9ybShcbiAgICAgIGRlZmF1bHRTZXNzaW9uLFxuICAgICAgZGVmYXVsdEhhbmRsZSxcbiAgICAgIHtcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICBwYXJ0aWFsUGl4ZWxhdGU6IHtcbiAgICAgICAgICBhbW91bnQ6IDIsXG4gICAgICAgIH0sXG4gICAgICB9XG4gICAgKTtcblxuICAgIGV4cGVjdChGaWxlbGluay5wcm90b3R5cGUuYWRkVGFzaykudG9IYXZlQmVlbkNhbGxlZFdpdGgoJ3BhcnRpYWxfcGl4ZWxhdGUnLCB7XG4gICAgICBhbW91bnQ6IDIsXG4gICAgfSk7XG4gIH0pO1xuXG4gIGl0KCdyZXR1cm4gY2FsbCB0b1N0cmluZyBvbiBmaWxlbGluayB3aGVuIHBhcmFtcyBhcmUgZW1wdHknLCAoKSA9PiB7XG4gICAgY29uc3QgdGVzdFVybCA9ICduYW5hbmEnO1xuICAgIHNweU9uKEZpbGVsaW5rLnByb3RvdHlwZSwgJ3RvU3RyaW5nJykuYW5kLmNhbGxGYWtlKCgpID0+IHRlc3RVcmwpO1xuXG4gICAgZXhwZWN0KHRyYW5zZm9ybShcbiAgICAgIGRlZmF1bHRTZXNzaW9uLFxuICAgICAgZGVmYXVsdEhhbmRsZVxuICAgICkpLnRvRXF1YWwodGVzdFVybCk7XG4gIH0pO1xuXG4gIGl0KCdzaG91bGQgZW5hYmxlIGJhc2U2NCBvbiBmaWxlbGluaycsICgpID0+IHtcbiAgICB0cmFuc2Zvcm0oXG4gICAgICBkZWZhdWx0U2Vzc2lvbixcbiAgICAgIGRlZmF1bHRIYW5kbGUsXG4gICAgICB7XG4gICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgcGFydGlhbFBpeGVsYXRlOiB7XG4gICAgICAgICAgYW1vdW50OiAyLFxuICAgICAgICB9LFxuICAgICAgfSxcbiAgICAgIHRydWVcbiAgICApO1xuXG4gICAgZXhwZWN0KEZpbGVsaW5rLnByb3RvdHlwZS5zZXRCYXNlNjQpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKHRydWUpO1xuICB9KTtcbn0pO1xuIl19
