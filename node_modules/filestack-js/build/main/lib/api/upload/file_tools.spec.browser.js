"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
/*
 * Copyright (c) 2019 by Filestack.
 * Some rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the 'License');
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an 'AS IS' BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var file_tools_1 = require("./file_tools");
var utils = require("./../../utils");
var createFile = function (size, name, type) {
    if (size === void 0) { size = 44320; }
    if (name === void 0) { name = 'test.png'; }
    if (type === void 0) { type = 'image/png'; }
    return new File([new ArrayBuffer(size)], name, { type: type });
};
var sanitizeOptions = jest.fn().mockName('sanitizeOptions');
var base64Svg = 'PHN2ZyBoZWlnaHQ9IjEwMCIgd2lkdGg9IjEwMCI+CiAgPGNpcmNsZSBjeD0iNTAiIGN5PSI1MCIgcj0iNDAiIHN0cm9rZT0iYmxhY2siIHN0cm9rZS13aWR0aD0iMyIgZmlsbD0icmVkIiAvPgogIFNvcnJ5LCB5b3VyIGJyb3dzZXIgZG9lcyBub3Qgc3VwcG9ydCBpbmxpbmUgU1ZHLiAgCjwvc3ZnPiA=';
var base64Png = 'iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAADUlEQVR42mNk+M9QDwADhgGAWjR9awAAAABJRU5ErkJggg==';
var base64Gif = 'R0lGODlhAQABAIAAAP///wAAACH5BAEAAAAALAAAAAABAAEAAAICRAEAOw==';
describe('Api/Upload/FileTools', function () {
    beforeAll(function () {
        spyOn(utils, 'sanitizeName').and.callFake(function (val, opts) {
            sanitizeOptions(opts);
            return val;
        });
    });
    describe('getFileBrowser', function () {
        it('Should handle base64 encoded string (svg)', function () { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
            var _a;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = expect;
                        return [4 /*yield*/, file_tools_1.getFile({
                                file: base64Svg,
                                name: 'test.svg',
                            })];
                    case 1: return [2 /*return*/, _a.apply(void 0, [(_b.sent()).mimetype]).toEqual('image/svg+xml')];
                }
            });
        }); });
        it('Should handle base64 encoded string (png)', function () { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
            var _a;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = expect;
                        return [4 /*yield*/, file_tools_1.getFile(base64Png)];
                    case 1: return [2 /*return*/, _a.apply(void 0, [(_b.sent()).mimetype]).toEqual('image/png')];
                }
            });
        }); });
        it('Should handle base64 encoded string (gif)', function () { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
            var _a;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = expect;
                        return [4 /*yield*/, file_tools_1.getFile(base64Gif)];
                    case 1: return [2 /*return*/, _a.apply(void 0, [(_b.sent()).mimetype]).toEqual('image/gif')];
                }
            });
        }); });
        it('Should handle base64 encoded string with b64 prefix (gif)', function () { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
            var _a;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = expect;
                        return [4 /*yield*/, file_tools_1.getFile("data:image/gif;base64," + base64Gif)];
                    case 1: return [2 /*return*/, _a.apply(void 0, [(_b.sent()).mimetype]).toEqual('image/gif')];
                }
            });
        }); });
        it('Should pass sanitize options to file instance', function () { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
            var soptions, fileRes;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        soptions = {
                            replacement: '=',
                        };
                        return [4 /*yield*/, file_tools_1.getFile({
                                file: base64Png,
                                name: 'test<.jpg',
                            }, soptions)];
                    case 1:
                        fileRes = _a.sent();
                        expect(sanitizeOptions).toHaveBeenCalledWith(soptions);
                        return [2 /*return*/];
                }
            });
        }); });
        it('Should throw error when random string is provided', function () {
            return expect(file_tools_1.getFile('asdasdfasdf')).rejects.toEqual(new Error('Unsupported input file type'));
        });
        it('Should handle base64 named file (gif)', function () { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
            var file;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, file_tools_1.getFile({
                            file: base64Gif,
                            name: 'test.gif',
                        })];
                    case 1:
                        file = _a.sent();
                        expect(file.mimetype).toEqual('image/gif');
                        expect(file.name).toEqual('test.gif');
                        return [2 /*return*/];
                }
            });
        }); });
        it('Should handle File input type', function () { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
            var file;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, file_tools_1.getFile(createFile())];
                    case 1:
                        file = _a.sent();
                        expect(file.mimetype).toEqual('image/png');
                        expect(file.name).toEqual('test.png');
                        expect(file.size).toEqual(44320);
                        return [2 /*return*/];
                }
            });
        }); });
        it('Should handle blob input type', function () { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
            var file;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, file_tools_1.getFile(new Blob([new ArrayBuffer(100)], {
                            type: 'image/jpg',
                        }))];
                    case 1:
                        file = _a.sent();
                        expect(file.mimetype).toEqual('image/jpg');
                        expect(file.name).toEqual(undefined);
                        expect(file.size).toEqual(100);
                        return [2 /*return*/];
                }
            });
        }); });
    });
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,
