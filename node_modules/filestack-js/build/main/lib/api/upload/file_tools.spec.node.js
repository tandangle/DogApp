"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
/*
 * Copyright (c) 2019 by Filestack.
 * Some rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the 'License');
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an 'AS IS' BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var file_tools_1 = require("./file_tools");
var fs = require("fs");
jest.mock('fs');
var mockedTestFile = Buffer.from('text text');
var base64Svg = 'PHN2ZyBoZWlnaHQ9IjEwMCIgd2lkdGg9IjEwMCI+CiAgPGNpcmNsZSBjeD0iNTAiIGN5PSI1MCIgcj0iNDAiIHN0cm9rZT0iYmxhY2siIHN0cm9rZS13aWR0aD0iMyIgZmlsbD0icmVkIiAvPgogIFNvcnJ5LCB5b3VyIGJyb3dzZXIgZG9lcyBub3Qgc3VwcG9ydCBpbmxpbmUgU1ZHLiAgCjwvc3ZnPiA=';
describe('Api/Upload/FileTools', function () {
    describe('getFileNode', function () {
        it('Should return file instance for nodejs loaded file from path', function () { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
            var file, meta, slice;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        spyOn(fs, 'existsSync').and.returnValue(true);
                        spyOn(fs, 'readFile').and.callFake(function (path, cb) {
                            cb(null, mockedTestFile);
                        });
                        return [4 /*yield*/, file_tools_1.getFile('/testfile.txt')];
                    case 1:
                        file = _a.sent();
                        expect(file.name).toEqual('testfile.txt');
                        expect(file.mimetype).toEqual('text/plain');
                        expect(file.size).toEqual(9);
                        meta = file.getPartMetadata(0, 2);
                        return [4 /*yield*/, file.getPartByMetadata(meta)];
                    case 2:
                        slice = _a.sent();
                        expect(slice.size).toEqual(2);
                        return [2 /*return*/];
                }
            });
        }); });
        it('Should reject if provided file cannot be read', function () {
            spyOn(fs, 'existsSync').and.returnValue(true);
            spyOn(fs, 'readFile').and.callFake(function (path, cb) {
                cb('error');
            });
            return expect(file_tools_1.getFile('/testfile.txt')).rejects.toEqual('error');
        });
        it('Should return correct mimetype', function () { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
            var file;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        jest.unmock('fs');
                        return [4 /*yield*/, file_tools_1.getFile('./package.json')];
                    case 1:
                        file = _a.sent();
                        expect(file.mimetype).toEqual('application/json');
                        return [2 /*return*/];
                }
            });
        }); });
        it('Should return correct file instance from buffer', function () { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
            var file;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, file_tools_1.getFile(mockedTestFile)];
                    case 1:
                        file = _a.sent();
                        expect(file.size).toEqual(9);
                        expect(file.mimetype).toEqual('text/plain');
                        return [2 /*return*/];
                }
            });
        }); });
        it('Should handle base64 encoded string', function () { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
            var file;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, file_tools_1.getFile({
                            name: 'test.svg',
                            file: base64Svg,
                        })];
                    case 1:
                        file = _a.sent();
                        expect(file.mimetype).toEqual('image/svg+xml');
                        return [2 /*return*/];
                }
            });
        }); });
        it('Should detect text/plain mimetype', function () { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
            var file;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, file_tools_1.getFile({
                            name: 'test.undefined',
                            file: base64Svg,
                        })];
                    case 1:
                        file = _a.sent();
                        expect(file.mimetype).toEqual('text/plain');
                        return [2 /*return*/];
                }
            });
        }); });
        it('Should handle base64 encoded string with b64 prefix (svg)', function () { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
            var _a;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = expect;
                        return [4 /*yield*/, file_tools_1.getFile("data:image/svg+xml;base64," + base64Svg)];
                    case 1: 
                    // it is hard to detect svg mimetype for now using fallback to application/octet-stream
                    return [2 /*return*/, _a.apply(void 0, [(_b.sent()).mimetype]).toEqual('application/octet-stream')];
                }
            });
        }); });
        it('Should get part of the buffer after slice', function () { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
            var file, meta, slice;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, file_tools_1.getFile(mockedTestFile)];
                    case 1:
                        file = _a.sent();
                        meta = file.getPartMetadata(0, 2);
                        return [4 /*yield*/, file.getPartByMetadata(meta)];
                    case 2:
                        slice = _a.sent();
                        expect(slice.size).toEqual(2);
                        return [2 /*return*/];
                }
            });
        }); });
        it('Should handle base64 encoded string', function () { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
            var file;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, file_tools_1.getFile({
                            name: 'test.undefined',
                            file: Buffer.of(12),
                        })];
                    case 1:
                        file = _a.sent();
                        expect(file.mimetype).toEqual('text/plain');
                        return [2 /*return*/];
                }
            });
        }); });
        it('Should throw error when random string is provided', function () { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                return [2 /*return*/, expect(file_tools_1.getFile('asdasdfasdf')).rejects.toEqual(new Error('Unsupported input file type'))];
            });
        }); });
        it('Should pass sanitize options to file instance (buffer)', function () { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
            var fileRes;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, file_tools_1.getFile({
                            file: mockedTestFile,
                            name: 'test<.jpg',
                        }, {
                            replacement: '=',
                        })];
                    case 1:
                        fileRes = _a.sent();
                        expect(fileRes.name).toEqual('test=.jpg');
                        return [2 /*return*/];
                }
            });
        }); });
        it('Should pass sanitize options to file instance path', function () { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
            var fileRes;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, file_tools_1.getFile({
                            file: './package.json',
                            name: 'test<.jpg',
                        }, {
                            replacement: '=',
                        })];
                    case 1:
                        fileRes = _a.sent();
                        expect(fileRes.name).toEqual('test=.jpg');
                        return [2 /*return*/];
                }
            });
        }); });
        it('Should handle named file input', function () { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
            var file;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, file_tools_1.getFile({
                            name: '123.jpg',
                            file: mockedTestFile,
                        })];
                    case 1:
                        file = _a.sent();
                        expect(file.name).toEqual('123.jpg');
                        expect(file.size).toEqual(9);
                        expect(file.mimetype).toEqual('image/jpeg');
                        return [2 /*return*/];
                }
            });
        }); });
        it('Should reject on unsupported input file type', function () {
            // @ts-ignore
            return expect(file_tools_1.getFile({})).rejects.toEqual(new Error('Unsupported input file type'));
        });
    });
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,
